<?php
// $Id$

function asce_dev_form_alter(&$form, &$form_state, $form_id) {
	if($_GET['debug'] == TRUE){
		dsm($form);
	}
}

function asce_dev_menu() {
	$items['dev/marvin'] = array(
		'title' => 'Scan Directories',
    	'description' => 'Scan a directory and create an array of files.',
    	'page callback' => 'asce_dev_scan',
    	'access callback' => 'user_access',
    	'access arguments' => array('administer site configuration'),
	);
	$items['dev/file-counts'] = array(
		'title' => 'Count files in directories',
    	'description' => 'Scan a directory and its subs to count files.',
    	'page callback' => 'asce_dev_count',
    	'access callback' => 'user_access',
    	'access arguments' => array('administer site configuration'),
	); 
	$items['dev/delete_copri_images'] = array(
		'title' => 'Delete COPRI Images',
    	'description' => 'Delete COPRI Images',
    	'page callback' => 'asce_dev_delete_copri_images',
    	'access callback' => 'user_access',
    	'access arguments' => array('administer site configuration'),
	);
	
	$items['dev/progress'] = array(
		'title' => 'Deletion progress!',
		'page callback' => 'drupal_get_form',
		'page arguments' => array('asce_dev_delete_form'),
    'access callback' => 'user_access',
    'access arguments' => array('administer site configuration'),
	);
	$items['dev/message_js'] = array(
		'page callback' => 'asce_dev_message_js',
		'type' => MENU_CALLBACK,
    'access callback' => 'user_access',
    'access arguments' => array('administer site configuration'),
	);
	$items['dev/interval_js'] = array(
		'page callback' => 'asce_dev_interval_js',
		'type' => MENU_CALLBACK,
    'access callback' => TRUE,
	);
	return $items;
}

/**
* Form definition.
*/
function asce_dev_delete_form(&$form_state) {
	$form['target'] = array(
		'#type' => 'markup',
		'#prefix' => '<div id="target">',
		'#value' => t('Click the button below. I dare you.'),
		'#suffix' => '</div>',
	);
	$form['submit'] = array(
			'#type' => 'submit',
			'#value' => t('Click Me'),
			'#ahah' => array(
			'event' => 'click',
			'path' => 'dev/message_js',
			'wrapper' => 'target',
			'effect' => 'fade',
			'progress' => array(
				'type' => 'bar',
				'message' => t('One moment...'),
				'interval' => 2,
				'url' => 'dev/interval_js',
			),
		)
	);
	return $form;
}

/**
* Menu callback for AHAH additions.
*/
function asce_dev_message_js() {
	$output = t('POOF!');
	for ($i = 0; $i < 100; $i = $i + 20) {
		// Record how far we are.
		variable_set('poof_percentage', $i);
		// Simulate performing a task by waiting 2 seconds.
		sleep(2);
	}
	drupal_json(array('status' => TRUE, 'data' => $output));
}

/**
* Menu callback for AHAH additions.
*/
function asce_dev_interval_js() {
	// Read how far we are.
	$percentage = variable_get('poof_percentage', 0);
	// Return the value to the JavaScript progress bar.
	drupal_json(array('percentage' => $percentage));
}

function asce_dev_scan() {
	// Just set some variables up
	$output = '';
	
	// Clean filepath in the {files} tables
	$sql = "SELECT * FROM files";
	$results = db_query($sql);
	while ($row = db_fetch_object($results)) {
		$records[] = $row;
		if (strpos($row->filepath, '//')) {
			$new_filepath = str_replace('//', '/', $row->filepath);
			$row->filepath = $new_filepath;
			if(drupal_write_record('files', $row, array('fid')) == SAVED_UPDATED) {
				// Alter the record in the database
				$replaced .= $row->filepath . ' to ' . $new_filepath . '<br/>';
			}
		}
	}
	$output .= '<p>Cleaned the filepath in the {files} table. There were ' . count($replaced) . ' filepaths that had // in it.</p>';
	$output .= '<p>There are ' . count($records) . ' records in the {files} table.</p>';
	unset($records);
	unset($results);
	
	// Check the {files} fids against other tables.
	$check_tables = array(
		'content_type_video' => 'field_video_fid',
		'content_type_ci_content' => 'field_image_fid',
		'content_field_resume' => 'field_resume_fid',
		'upload' => 'fid',
		'image' => 'fid',
	);
	$sql = "SELECT * FROM files";
	$results = db_query($sql);
	while($row = db_fetch_object($results)) {
		$fid = $row->fid;
		$found = FALSE;
		foreach($check_tables as $table => $field) {
			$check_sql = "SELECT $field FROM $table WHERE $field = $fid";
			$sql_list .= $check_sql . '<br/>';
			$check_results = db_query($check_sql);
			if($check_row = db_fetch_object($check_results)) {
				$found = TRUE;
			}
		}
		if (!$found) {
			$orphans[$row->fid] = $row->filepath;
			$orphans_list .= $fid . '--->' . $row->filepath . '<br/>';
			//****** Move the record to {dev_files} ******//
			$move_sql = "SELECT * FROM dev_files WHERE fid = $fid";
			$move_results = db_query($move_sql);
			if($row = db_fetch_object($move_results)) { // if it is already in the table
				watchdog('asce_dev', "drupal_write_record('dev_files', '$fid is: ' . {$row->fid}");
				drupal_write_record('dev_files', $row, array('fid'));
			}
			else { // it is not in the table
				watchdog('asce_dev', "drupal_write_record('dev_files', '$fid is: ' . {$row->fid}");
				drupal_write_record('dev_files', $row);
			}
			watchdog('asce_dev', "DELETE FROM files WHERE fid = $fid");
			db_query("DELETE FROM files WHERE fid = $fid");
		}
	}
	$output .= '<p>Deleted ' . count($orphans) . ' records from {files} that were not in the {upload}, {content_type_video}, ';
	$output .= '{content_type_ci_content}, {content_field_resume}, {image} tables. They were copied into the {dev_files} table for backup.</p>';
	//$output .= '<p>List of files that will be moved.<br/>' . $orphans_list . '</p>';
	
	// Recheck the {files} table
	$sql = "SELECT * FROM files";
	$results = db_query($sql);
	while ($row = db_fetch_object($results)) {
		$records[] = $row;
	}
	$output .= '<p>The {files} table now has ' . count($records) . ' records in it.</p>';
	
	// Now we want to check how many of the records in the {check_tables} have valid nids
	$check_tables = array(
		'content_type_video' => 'field_video_fid',
		'content_type_ci_content' => 'field_image_fid',
		'content_field_resume' => 'field_resume_fid',
		'upload' => 'fid',
		'image' => 'fid',
	);
	foreach ($check_tables as $table => $field) {
		$sql = "SELECT c.nid FROM $table c LEFT JOIN node n ON c.nid = n.nid WHERE n.nid IS NULL";
		$results = db_query($sql);
		while ($nid = db_result($results)) {
			$invalid_nids[$nid] = $nid;
			//****** Deleted records from the database ******//
			watchdog('asce_dev', "DELETE FROM $table WHERE nid = $nid");
			db_query("DELETE FROM $table WHERE nid = $nid");
		}
	}
	$output .= '<p>There were ' . count($invalid_nids) . ' invalid nids found! They have been deleted.';
	
	$dirs = array(
		'sites/default/files/images',
		'sites/default/files/videos',
		'sites/default/files',
		'sites/default/files/files/student-days/resumes',
		'sites/default/files/content-102-2',
		'sites/default/files/content-890-2',
	);
	// Now that the {files} table is all cleaned up. We want to delete the extra files from the server.
	$all_files = array();
	$total_deleted = array();
	$dest = 'sites/default/back_files';
	foreach($dirs as $dir) {
		$search = $dir;
		$files = file_scan_directory($search, '^.*\..*$',array('.', '..', 'CVS'),0, FALSE);
		$all_files = array_merge($all_files, $files);
		foreach ($files as $file) {
			$filename = str_replace("'", "''", $file->filename);
			$file_list .= $file->filename . '<br/>';
			// Check to see if the file is in the {files} table
			$check_sql = "SELECT * FROM files WHERE filepath = '$filename'";
			$check_results = db_query($check_sql);
			$check_row = db_fetch_object($check_results);
			$check_list .= $file->filename . '--->' . $check_row->filepath . '<br/>';
			if (empty($check_row)) {
				$deleted_files[$file->filename] = $file->filename;
				$deleted_list .= $file->filename . '<br/>';
				rename($file->filename, $dest . '/' . $file->basename);
				if ($php_errmsg) {
					drupal_set_message($php_errormsg);
				}
			}
		}
		if (is_array($deleted_files)) {
			$total_deleted = array_merge($total_deleted, $deleted_files);
		}
		$output .= '<p>There are ' . count($files) . ' files in ' . $dir . '<br/>';
		$output .= 'There are ' . count($deleted_files) . ' files on the server that are not in the {files} table. Need to verify that we can get rid of them.<br/>';
		unset($deleted_files);	
	}
	//$output .= '<p>The deleted file list<br/>' . $deleted_list . '</p>';
	
	// Lastly, we create an array just to be safe based on the {files} table
	$sql = "SELECT * FROM files";
	$results = db_query($sql);
	while($row = db_fetch_object($results)) {
		$filename_pieces = explode('/', $row->filepath);
		$file_name = array_pop($filename_pieces);
		$base_dir = implode('/', $filename_pieces);
		$row->filename = end($filename_pieces);
		$depth = count($filename_pieces);
		$analysis[$base_dir] = $base_dir;
		drupal_write_record('files', $row, array('fid'));
		$files_table[$row->filepath] = $row->filepath;
		$files_list .= $row->filepath . '<br/>';
		if(!file_exists($row->filepath)) {
			$not_exist[$row->fid] = $row->filepath;
		}
	}
	dsm($analysis);
	$all_files = array();
	foreach($dirs as $dir) {
		$files = file_scan_directory($dir, '^.*\..*$',array('.', '..', 'CVS'),0, FALSE);
		$all_files = array_merge($all_files, $files);		
	}
	
	$output .= '<h2>Summary of results</h2>';
	$output .= '<p>Files on server: ' . count($all_files) . '</p>';
	$output .= '<p>Total deleted: ' . count($total_deleted) . '</p>'; 
	$output .= '<p>Files in {files} table: ' . count($files_table) . '</p>';
	$output .= '<p>Files not found on server: ' . count($not_exist) . '</p>';
	
	// So now we know which files are in the {files} table, but not on the server
	$count = 0;
	if (!is_null($not_exist)) {
		foreach($not_exist as $fid => $filepath) {
			foreach($check_tables as $table => $field) {
				$sql = "SELECT nid FROM $table WHERE $field = $fid";
				$results = db_query($sql);
				if($nid = db_result($results)) {
					$nids[$nid] = $nid;
					$nid_list .= l('node/' . $nid, 'node/' . $nid) . ", $filepath<br/>";
					//node_delete($nid);
					//$count = $count + 1;
				}
				if ($count > 250) {
					break;
				}
			}
			if ($count > 250) {
				break;
			}
		}
	}
	$output .= '<p>Nodes to be deleted<br/>' . $nid_list . '</p>';
	
	return $output;
}

function asce_dev_count() {
	$files = file_scan_directory($search, '^.*\..*$',array('.', '..', 'CVS'),0, FALSE);
	foreach($files as $file) {
		dsm($file->filename);
		break;
	}
	return '';	
}

function asce_dev_delete_copri_images() {
	$sql = "SELECT tid FROM term_hierarchy WHERE parent=15";
	$results = db_query($sql);
	$tid15 = taxonomy_get_children(15);
	$tid101 = taxonomy_get_children(101);
	$tids = array_merge($tid15, $tid101);
	
	$count = 0;
	foreach($tids as $term) {
		$nodes = array();
		$sql = "SELECT nid FROM term_node WHERE tid = %d";
		$results = db_query($sql, $term->tid);
		drupal_set_message("Deleted all images from: " . $term->name . "({$term->tid})");
		while ($nid = db_result($results)) {
			$nodes[$nid] = $nid;
			node_delete($nid);
			$count = $count + 1;
		}
		if ($count > 250) {
			break;
		}
	}
	return '';	
}