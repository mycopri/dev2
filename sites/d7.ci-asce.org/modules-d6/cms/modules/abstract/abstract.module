<?php
// $Id$

/**
 * Implementation of hook_node_info
 */
function abstract_node_info() {
	return array(
    'abstract' => array(
      'name' => t('Abstract'),
      'module' => 'abstract',
      'description' => t('An abstract of a conference paper or presentation.'),
      'title_label' => t('Title'),
      'body_label' => t('Abstract'),
      'has_body' => TRUE,
	),
	);
}

/*
 * Implementation of hook_insert()
 */
function abstract_insert($node) {
	if(module_exists('cms')) {
		$subtopic = cms_get_subtopic($node->subtopic);
		$record->event_id = $node->event;
		$record->abstract_nid = $node->nid;
		$record->full_paper = $node->full_paper ? $node->full_paper : 0;
		drupal_write_record('cms_abstract', $record);
	}
}

/*
 * Implementation of hook_update
 */
function abstract_update($node) {
	if (module_exists('cms')) {
		$node = node_load($node->nid);
		abstract_update_abstract_cms($node);
	}
}

/*
 * Implementation of hook_view
 */
function abstract_view($node) {
	if(module_exists('cms')) {
		global $user;
		if ($_GET['destination']) {
			$bc = drupal_get_breadcrumb();			
			$conference = cms_get_conference($node->event, TRUE);
			$bc[] = l($conference->event, $_GET['destination']);
			drupal_set_breadcrumb($bc);
		}
		else {
			$bc = drupal_get_breadcrumb();
			$conference = cms_get_conference($node->event, TRUE);
			$bc[] = l($conference->event, 'conferences/' . $conference->url);
			drupal_set_breadcrumb($bc);			
		}
		$node = node_prepare($node, $teaser);
		$topic = cms_get_topic($node->topic);
		$subtopic = cms_get_subtopic($node->subtopic);
		$node->content['topic'] = array(
		  '#value' => '<b>Topic: </b>' . $topic->title . '<br/>',
		  '#weight' => -3,
		);
		$node->content['subtopic'] = array(
		  '#value' => '<b>Sub-topic: </b>' . $subtopic->title . '<br/><br/>',
		  '#weight' => -1,
		);
		$node->content['authors'] = array(
		  '#value' => theme('abstract_authors', $node->nid),
		  '#weight' => 0,
		);

		$node->content['body']['#value'] = '<b>Abstract:<br/></b>' . check_markup($node->content['body']['#value'], 4, FALSE);
		if (user_access('administer cms') || $user->uid == $node->uid) {
			$node->content['edit-buttons'] = array(
			  '#value' => drupal_get_form('cms_abstract_edit_buttons',$node),
			  '#weight' => -5,
			);
			$full_paper = $node->full_paper ? 'Yes' : 'No';
			$node->content['full_paper'] = array(
			  '#value' => drupal_get_form('full_paper_form', $node),
			  '#weight' => -4,
			);			
		}
		return $node;
	}
}

function full_paper_form(&$form_state, $node) {
	// Will a full paper be submitted?
	$option_yes_text = 'Yes <em class="description"><b>Must be selected if to be considered for the ASCE ' .
		'Texas Section Fall Conference Program on Friday.</b></em>';
	$form['full_paper_box'] = array(
		'#type' => 'fieldset',
		'#weight' => -10,
	);	
	$form['full_paper_box']['full_paper'] = array(
		'#type' => 'radios',
		'#title' => 'Do you plan on submitting a full paper?',
		'#default_value' => $node->full_paper ? 1 : 0,
  	'#options' => array(1 => t($option_yes_text), 0 => t('No')),
  	'#description' => t('In order to be considered for the ASCE Texas Section ' . 
  		'2012 Fall Conference, you must submit a full paper which will ' . 
  		'be considered for the the Paper Award.'),
	);
	$form['full_paper_box']['submit'] = array(
		'#type' => 'submit',
		'#value' => t('Submit'),
	);	
	return $form;
}

function full_paper_form_submit($form, $form_state) {
	$node = node_load(arg(1));
	$node->full_paper = $form_state['values']['full_paper'];
	abstract_update_abstract_cms($node);
	return '';
}

/*
 * Implementation of hook_load
 */
function abstract_load($node) {
	if(module_exists('cms')) {
		$sql = "SELECT * FROM cms_abstract WHERE abstract_nid = {$node->nid}";
		$results = db_query($sql);
		$abstract = db_fetch_object($results);
		$node->event = $abstract->event_id;
		$node->topic = $abstract->topic;
		$node->subtopic = $abstract->subtopic;
		$node->full_paper = $abstract->full_paper;
	}
}
/**
 * Implementation of hook_perm
 */
function abstract_perm() {
	return array('view original abstracts', 'create abstracts', 'edit own abstracts', 'edit any abstracts', 'delete own abstracts', 'delete any abstracts');
}

/**
 * Implementation of hook_access().
 */
function abstract_access($op, $node, $account) {
	switch ($op) {
		case 'create':
			if (user_access('create abstracts', $account)) {
				return TRUE;
			}
			break;

		case 'update':
			if (user_access('edit any abstracts', $account) || ($account->uid == $node->uid && user_access('edit own abstracts', $account))) {
				return TRUE;
			}
			break;

		case 'delete':
			if (user_access('delete any abstracts', $account) || ($account->uid == $node->uid && user_access('delete own abstracts', $account))) {
				return TRUE;
			}
			break;

		case 'view':
			if (($account->uid == $node->uid || user_access('access content', $account))) {
				return TRUE;
			}
			else {
				return FALSE;
			}
			break;
	}
}

/**
 * Implementation of hook_form().
 */
function abstract_form(&$node, $form_state) {
	global $user;

	$admin = user_access('administer nodes') || user_access('edit any abstract') || (user_access('edit own abstract') && $user->uid == $node->uid);

	$type = node_get_types('type', $node);

	$form = array(
    '#cache' => TRUE,
	);

	$form['title'] = array(
    '#type' => 'textfield',
    '#title' => check_plain($type->title_label),
    '#size' => 60,
    '#maxlength' => 128,
    '#required' => TRUE,
    '#default_value' => $node->title,
	);

	if ($type->has_body) {
		$form['body_field'] = node_body_field($node, $type->body_label, $type->min_word_count);
	}
	
	// Will a full paper be submitted?
	$option_yes_text = 'Yes <em class="description"><b>Must be selected if to be considered for the ASCE ' .
		'Texas Section Fall Conference Program on Friday.</b></em>';	
	$form['full_paper'] = array(
		'#type' => 'radios',
		'#title' => 'Do you plan on submitting a full paper?',
		'#default_value' => $node->full_paper ? 1 : 0,
  	'#options' => array(1 => t($option_yes_text), 0 => t('No')),
  	'#description' => t('In order to be considered for the ASCE Texas Section ' . 
  		'2012 Fall Conference, you must submit a full paper which will ' . 
  		'be considered for the the Paper Award.'),
	);

	return $form;
}

/**
 * Save uploaded abstract file and store them in the session to be associated to the node
 * on upload_save.
 *
 * Taken from the upload module. upload_node_form_submit(&$form, &$form_state)
 *
 * @param $node
 *   A node object to associate with uploaded files.
 */
function _abstract_upload_form($node) {
	global $user;

	$form = array(
    '#theme' => 'upload_form_new',
    '#cache' => TRUE,
	);

	if (!empty($node->files) && is_array($node->files)) {
		$form['files']['#theme'] = 'upload_form_current';
		$form['files']['#tree'] = TRUE;
		foreach ($node->files as $key => $file) {
			$file = (object)$file;
			$description = file_create_url($file->filepath);
			$description = "<small>". check_plain($description) ."</small>";
			$form['files'][$key]['description'] = array('#type' => 'textfield', '#default_value' => !empty($file->description) ? $file->description : $file->filename, '#maxlength' => 256, '#description' => $description );
			$form['files'][$key]['size'] = array('#value' => format_size($file->filesize));
			$form['files'][$key]['remove'] = array('#type' => 'checkbox', '#default_value' => !empty($file->remove));
			$form['files'][$key]['list'] = array('#type' => 'checkbox',  '#default_value' => $file->list);
			$form['files'][$key]['weight'] = array('#type' => 'weight', '#delta' => count($node->files), '#default_value' => $file->weight);
			$form['files'][$key]['filename'] = array('#type' => 'value',  '#value' => $file->filename);
			$form['files'][$key]['filepath'] = array('#type' => 'value',  '#value' => $file->filepath);
			$form['files'][$key]['filemime'] = array('#type' => 'value',  '#value' => $file->filemime);
			$form['files'][$key]['filesize'] = array('#type' => 'value',  '#value' => $file->filesize);
			$form['files'][$key]['fid'] = array('#type' => 'value',  '#value' => $file->fid);
			$form['files'][$key]['new'] = array('#type' => 'value', '#value' => FALSE);
		}
	}

	if (user_access('upload files')) {
		$limits = _upload_file_limits($user);
		$form['new']['#weight'] = 10;
		$form['new']['upload'] = array(
      '#type' => 'file',
      '#title' => t('Attach new file'),
      '#size' => 40,
      '#description' => ($limits['resolution'] ? t('Images are larger than %resolution will be resized. ', array('%resolution' => $limits['resolution'])) : '') . t('The maximum upload size is %filesize. Only files with the following extensions may be uploaded: %extensions. ', array('%extensions' => $limits['extensions'], '%filesize' => format_size($limits['file_size']))),
		);
		$form['new']['attach'] = array(
      '#type' => 'submit',
      '#value' => t('Attach'),
      '#name' => 'attach',
      '#ahah' => array(
        'path' => 'upload/js',
        'wrapper' => 'attach-wrapper',
        'progress' => array('type' => 'bar', 'message' => t('Please wait...')),
		),
      '#submit' => array('node_form_submit_build_node'),
		);
	}

	return $form;
}

function _abstract_upload_node_form_submit(&$form, &$form_state) {
	global $user;

	$limits = _upload_file_limits($user);
	$validators = array(
    'file_validate_extensions' => array('doc', 'pdf', 'docx'),
    'file_validate_image_resolution' => array($limits['resolution']),
    'file_validate_size' => array($limits['file_size'], $limits['user_size']),
	);

	// Save new file uploads.
	if (user_access('upload files') && ($file = file_save_upload('upload', $validators, file_directory_path()))) {
		$file->list = variable_get('upload_list_default', 1);
		$file->description = $file->filename;
		$file->weight = 0;
		$file->new = TRUE;
		$form['#node']->files[$file->fid] = $file;
		$form_state['values']['files'][$file->fid] = (array)$file;
	}

	if (isset($form_state['values']['files'])) {
		foreach ($form_state['values']['files'] as $fid => $file) {
			// If the node was previewed prior to saving, $form['#node']->files[$fid]
			// is an array instead of an object. Convert file to object for compatibility.
			$form['#node']->files[$fid] = (object) $form['#node']->files[$fid];
			$form_state['values']['files'][$fid]['new'] = !empty($form['#node']->files[$fid]->new);
		}
	}

	// Order the form according to the set file weight values.
	if (!empty($form_state['values']['files'])) {
		$microweight = 0.001;
		foreach ($form_state['values']['files'] as $fid => $file) {
			if (is_numeric($fid)) {
				$form_state['values']['files'][$fid]['#weight'] = $file['weight'] + $microweight;
				$microweight += 0.001;
			}
		}
		uasort($form_state['values']['files'], 'element_sort');
	}
}

/**
 * Update the cms_abstract table
 */
function abstract_update_abstract_cms($node) {
	$subtopic = cms_get_subtopic($node->subtopic);
	$record->event_id = $node->event;
	$record->abstract_nid = $node->nid;
	$record->subtopic = $node->subtopic;
	$record->topic = $node->topic_id;
	$record->full_paper = $node->full_paper;
	if($object = drupal_write_record('cms_abstract', $record, array('abstract_nid', 'event_id'))) {
		return $object;
	}
	else {
		return FALSE;
		}
}
