<?php
// $Id$

/*
 * Implementation of hook_menu().
 * 
 * The array of items are as follows:
 * 
 * "title": Required. The untranslated title of the menu item.
 * "title callback": Function to generate the title, defaults to t(). If you require only the raw string to be output, set this to FALSE.
 * "title arguments": Arguments to send to t() or your custom callback.
 * "description": The untranslated description of the menu item.
 * "page callback": The function to call to display a web page when the user visits the path. If omitted, the parent menu item's callback will be used instead.
 * "page arguments": An array of arguments to pass to the page callback function. Integer values pass the corresponding URL component (see arg()).
 * "access callback": A function returning a boolean value that determines whether the user has access rights to this menu item. Defaults to user_access() unless a value is inherited from a parent menu item..
 * "access arguments": An array of arguments to pass to the access callback function. Integer values pass the corresponding URL component.
 * "file": A file that will be included before the callbacks are accessed; this allows callback functions to be in separate files. The file should be relative to the implementing module's directory unless otherwise specified by the "file path" option.
 * "file path": The path to the folder containing the file specified in "file". This defaults to the path to the module implementing the hook.
 * "weight": An integer that determines relative position of items in the menu; higher-weighted items sink. Defaults to 0. When in doubt, leave this alone; the default alphabetical order is usually best.
 * "menu_name": Optional. Set this to a custom menu if you don't want your item to be placed in Navigation.
 * "type": A bitmask of flags describing properties of the menu item. Many shortcut bitmasks are provided as constants in menu.inc:
 *          MENU_NORMAL_ITEM: Normal menu items show up in the menu tree and can be moved/hidden by the administrator.
 *          MENU_CALLBACK: Callbacks simply register a path so that the correct function is fired when the URL is accessed.
 *          MENU_SUGGESTED_ITEM: Modules may "suggest" menu items that the administrator may enable.
 *          MENU_LOCAL_TASK: Local tasks are rendered as tabs by default.
 *          MENU_DEFAULT_LOCAL_TASK: Every set of local tasks should provide one "default" task, that links to the same path as its parent when clicked.
 * If the "type" key is omitted, MENU_NORMAL_ITEM is assumed.
 */
       
function ewri_register_menu() {
	global $user;
	
  $items['ewri2012'] = array(
    'title' => t('EWRI 2012'),
    'description' => t('2012 World Environmental and Water Resources Congress'),
    'page callback' => 'drupal_goto',
    'page arguments' => array('ewri2012/home'),
    'access callback' => TRUE,
    'menu_name' => 'ewri',
    'type' => MENU_CALLBACK,
  );
  $items['ewri2012/home'] = array(
    'title' => t('Home'),
    'description' => t('2012 World Environmental and Water Resources Congress'),
    'page callback' => 'ewri_register_home',
    'access callback' => TRUE,
    'menu_name' => 'ewri',
    'file' => 'ewri_register.pages.inc',
    'weight' => -1,
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );
  $items['ewri2012/administration'] = array(
    'title' => t('Admin'),
    'description' => t('Administer EWRI 2012'),
    'page callback' => 'ewri_register_admin',
    'access callback' => TRUE,
    'menu_name' => 'ewri',
    'file' => 'ewri_register.pages.inc',
    'type' => MENU_LOCAL_TASK,
  );
  $items['ewri2012/submit-session-proposal'] = array(
    'title' => t('Submit Propsal'),
    'description' => t('Submit a Proposal for Session'),
    'page callback' => 'ewri_register_submit_proposal',
    'access callback' => user_access,
//    'access arguments' => 
    'menu_name' => 'ewri',
    'file' => 'ewri_register.pages.inc',
    'type' => MENU_CALLBACK,
  );	
	
  return $items;
}

function ewri_register_nodeapi(&$node, $op, $teaser = NULL, $page = NULL) {
	switch($op) {
		case 'view':
			if ($node->type == 'congress_session_proposals') {
			  $breadcrumb = drupal_get_breadcrumb();
			  $breadcrumb[] = l('EWRI 2012', 'ewri2012');
			  drupal_set_breadcrumb($breadcrumb);
			}
			break;
	  case 'prepare':
	    if ($node->type == 'congress_session_proposals') {
        $breadcrumb = drupal_get_breadcrumb();
        $keep = $breadcrumb[1];
        $breadcrumb[1] = l('EWRI 2012', 'ewri2012');
        $breadcrumb[2] = $keep;
        drupal_set_breadcrumb($breadcrumb);
      }
	}
}

function ewri_register_block($op = 'list', $delta = 0, $edit = array()) {
  
  if ($op == 'list') {
    // returns array, with the following key-value pairs:
    //
    // 'info': (required) The human-readable name of the block. This is used to identify the block on administration screens, and is not displayed to non-administrative users.
    // 'cache': A bitmask of flags describing how the block should behave with respect to block caching. The following shortcut bitmasks are provided as constants in block.module:
    //    BLOCK_CACHE_PER_ROLE (default): The block can change depending on the roles the user viewing the page belongs to.
    //    BLOCK_CACHE_PER_USER: The block can change depending on the user viewing the page. This setting can be resource-consuming for sites with large number of users, and should only be used when BLOCK_CACHE_PER_ROLE is not sufficient.
    //    BLOCK_CACHE_PER_PAGE: The block can change depending on the page being viewed.
    //    BLOCK_CACHE_GLOBAL: The block is the same for every user on every page where it is visible.
    //    BLOCK_NO_CACHE: The block should not get cached.
    // 'weight': (optional) Initial value for the ordering weight of this block. Most modules do not provide an initial value, and any value provided can be modified by a user on the block configuration screen.
    // 'status': (optional) Initial value for block enabled status. (1 = enabled, 0 = disabled). Most modules do not provide an initial value, and any value provided can be modified by a user on the block configuration screen.
    // 'region': (optional) Initial value for theme region within which this block is set. Most modules do not provide an initial value, and any value provided can be modified by a user on the block configuration screen. Note: If you set a region that isn't available in the currently enabled theme, the block will be disabled.
    // 'visibility': (optional) Initial value for the visibility flag, which tells how to interpret the 'pages' value. Possible values are:
    //    0: Show on all pages except listed pages. 'pages' lists the paths where the block should not be shown.
    //    1: Show only on listed pages. 'pages' lists the paths where the block should be shown.
    //    2: Use custom PHP code to determine visibility. 'pages' gives the PHP code to use.
    //  Most modules do not provide an initial value for 'visibility' or 'pages', and any value provided can be modified by a user on the block configuration screen.
    // 'pages': (optional) See 'visibility' above.

    $blocks[0]['info'] = t('EWRI - Home');
    $blocks[0]['cache'] = BLOCK_NO_CACHE;
    
    return $blocks;
  }

  if ($op == 'view') {
    module_load_include('inc', 'ewri_register', 'ewri_register.blocks');
    switch ($delta) {
      case 0:
        $block = ewri_register_block_home();
        break;
    }
    return $block;
  }
}

function ewri_register_perm() {
	return array('view proposalsummaryreport');
}