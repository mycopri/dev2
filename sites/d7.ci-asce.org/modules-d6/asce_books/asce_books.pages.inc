<?php
// $Id$
/**
 * @file
 * Page callbacks
 */

function asce_books_test($arg1 = NULL, $arg2 = NULL, $arg3 = NULL) {
  if (!$arg1) {
    return 'You need to provide at least one argument for this test page to work!';
  }
  
  if ($arg1) {
    $node = node_load($arg1);
    // Get the the contents of the entire book in a menu like tree array
    $tree = book_menu_subtree_data($node->book);
    
    // Create an array of all the nodes in this book
    $book_pages = asce_books_traverse($tree);
    // $output .= 'Book nodes' . kpr($book_pages, TRUE);  // Debug output
    
    // Now loop through each of the nodes and create a array of comments
    $nids = array();
    foreach($book_pages as $node) {
      $nids[] = $node->nid;
    }
    $comments = asce_books_comment_get_recent($nids);
    $output .= 'Comments' . kpr($comments, TRUE);

    // Now create the output
    foreach($comments as $comment) {
      $node = node_load($comment->nid);
      $output .= theme('asce_books_comment_view', $comment, $node);
    }
  }
  
  return $output; 
}


/**
 * Traverse the book tree to build an array of nodes.
 *
 * @param $tree
 *   A subtree of the book menu hierarchy, rooted at the current page.
 * @return
 *   The an array of nodes that are paart of the book.
 */
function asce_books_traverse($tree) {
  $output = '';
  $book_nodes = array();
  foreach ($tree as $data) {
    // Note- access checking is already performed when building the tree.
    if ($node = node_load($data['link']['nid'], FALSE)) {
      $children = '';
      $book_nodes[$node->title] = $node;
      //dsm($book_nodes);
      if ($data['below']) {
      	$below = asce_books_traverse($data['below']);
      	$book_nodes = array_merge($book_nodes, $below);
      	//drupal_set_message('Below' . kpr($below, TRUE));
      }
    }
  }
  return $book_nodes;
}

/**
 * Themes a single comment and related items.
 *
 * @param $comment
 *   The comment object.
 * @param $node
 *   The comment node.
 * @param $links
 *   An associative array containing control links suitable for passing into
 *   theme_links(). These are generated by modules implementing hook_link() with
 *   $type='comment'. Typical examples are links for editing and deleting
 *   comments.
 * @param $visible
 *   Switches between folded/unfolded view. If TRUE the comments are visible, if
 *   FALSE the comments are folded.
 * @ingroup themeable
 */
function theme_asce_books_comment_view($comment, $node, $links = array(), $visible = TRUE) {
  static $first_new = TRUE;

  $output = '';
  $comment->new = node_mark($comment->nid, $comment->timestamp);
  if ($first_new && $comment->new != MARK_READ) {
    // Assign the anchor only for the first new comment. This avoids duplicate
    // id attributes on a page.
    $first_new = FALSE;
    $output .= "<a id=\"new\"></a>\n";
  }

  $output .= "<a id=\"comment-$comment->cid\"></a>\n";

  // Switch to folded/unfolded view of the comment
  if ($visible) {
    $comment->comment = check_markup($comment->comment, $comment->format, FALSE);

    // Comment API hook
    comment_invoke_comment($comment, 'view');

    $output .= theme('comment', $comment, $node, $links);
  }
  else {
    $output .= theme('comment_folded', $comment);
  }

  return $output;
}