<?php

// $Id: domain_user_default.module,v 1.1.2.16 2010/12/01 16:47:02 jhedstrom Exp $

/**
 * @file
 * Domain User Default module - associate a user with a domain
 */

/**
 * Constants for determining re-direct behavior.
 */
define('DOMAIN_USER_DEFAULT_REDIRECT_NEVER', 0);
define('DOMAIN_USER_DEFAULT_REDIRECT_PRIMARY', 1);
define('DOMAIN_USER_DEFAULT_REDIRECT_ALWAYS', 2);

if (module_exists('domain_geolocalization')) {
  /**
   * Constants determining the automatic setting of users default domains.
   */
  define('DOMAIN_USER_DEFAULT_GEOLOCALIZATION_AUTO_SET_NEVER', 0);
  define('DOMAIN_USER_DEFAULT_GEOLOCALIZATION_AUTO_SET_SINGLE', 1);
  define('DOMAIN_USER_DEFAULT_GEOLOCALIZATION_AUTO_SET_TOP', 2);

  /**
   * Constants defining $user object update when browsing other domains. Only
   * applies on paths that are not re-directed to the user's default.
   */
  define('DOMAIN_USER_DEFAULT_GEOLOCALIZATION_UPDATE_USER_NEVER', 0);
  define('DOMAIN_USER_DEFAULT_GEOLOCALIZATION_UPDATE_USER_PAGE', 1);
  define('DOMAIN_USER_DEFAULT_GEOLOCALIZATION_UPDATE_USER_PERMANENT', 2);
}

/**
 * Implementation of hook_perm().
 */
function domain_user_default_perm() {
  return array('set own domain default', 'set any user domain default');
}

/**
 * Implementation of hook_theme().
 */
function domain_user_default_theme() {
  return array(
    'domain_user_default_default_domain' => array(
      'arguments' => array('domain' => NULL),
      'file' => 'domain_user_default.theme.inc',
    ),
  );
}

/**
 * Implementation of hook_menu().
 */
function domain_user_default_menu() {
  $menu['domain-user-default/set/%'] = array(
    'title' => 'Set default domain',
    'page callback' => 'domain_user_default_set',
    'page arguments' => array(2, 3),
    'access arguments' => array('set own domain default'),
    'type' => MENU_CALLBACK,
    'file' => 'domain_user_default.inc',
  );

  return $menu;
}

/**
 * Implementation of hook_init().
 *
 * Redirect users to default domain. Depending on configuration, this will be
 * forced, or forced only on entry to the main domain.
 */
function domain_user_default_init() {
  if (_domain_user_default_is_internal_path()) {
    // On internal paths, do nothing.
    return;
  }

  global $user, $_domain;

  // Must load full user object.
  $user = user_load($user->uid);

  // Never redirect on these pages.
  if (_domain_user_default_no_redirect()) {
    if ($user->default_domain != $_domain['domain_id']
      && module_exists('domain_geolocalization')
      && variable_get('domain_geolocalization_update_default_on_link', DOMAIN_USER_DEFAULT_GEOLOCALIZATION_UPDATE_USER_NEVER)) {
      // Modify the user object to match current domain, if not on default
      // domain, and admin has the module configured to do so.
      $user->default_domain = $_domain['domain_id'];
      _domain_geolocalization_map_domain_to_user($user, $_domain);
      if (variable_get('domain_geolocalization_update_default_on_link', DOMAIN_USER_DEFAULT_GEOLOCALIZATION_UPDATE_USER_NEVER) == DOMAIN_USER_DEFAULT_GEOLOCALIZATION_UPDATE_USER_PERMANENT) {
        // Make changes to $user object permanent
        $edit = array(
          'domain_geolocalization' => $user->domain_geolocalization,
          'default_domain' => $user->default_domain,
        );
        unset($_SESSION['domain_user_default_location_set']);
          if (module_exists('domain_geolocalization')) {
            module_load_include('inc', 'domain_geolocalization');
            _domain_geolocalization_update_user($edit, $user);
          }
        module_load_include('inc', 'domain_user_default');
        _domain_user_default_set($user->default_domain);
      }
    }
    return;
  }

  switch (variable_get('domain_user_default_force_subdomain_redirect', DOMAIN_USER_DEFAULT_REDIRECT_PRIMARY)) {
    case DOMAIN_USER_DEFAULT_REDIRECT_PRIMARY:
      $redirect = $_domain['domain_id'] == 0;
      break;
    case DOMAIN_USER_DEFAULT_REDIRECT_ALWAYS:
      $redirect = TRUE;
      break;
    case DOMAIN_USER_DEFAULT_REDIRECT_NEVER:
    default:
      $redirect = FALSE;
  }

  if (isset($user->default_domain) && $user->default_domain !== FALSE) {
    if ($user->default_domain != $_domain['domain_id']) {
      $domain = domain_lookup($user->default_domain);
      $current_path = '';
      // If viewing a node redirect to the same node on default domain
      if (arg(0) == 'node' && is_numeric(arg(1))) {
        $current_node_id = arg(1);
        $current_path = drupal_get_path_alias('node/'. $current_node_id);
      }
      if (is_array($domain)  && $redirect) {
        // @todo: check if page exists on other domain, then use
        // domain_get_uri($domain) instead
        drupal_goto(domain_get_path($domain) . $current_path);
      }
      elseif ($domain && variable_get('domain_user_default_display_redirect_message', TRUE)) {
        // if no redirect, display message
        //drupal_set_message(t('Your default domain is <a href="!url">@link</a>', array('!url' => domain_get_uri($domain) . $current_path, '@link' => $domain['sitename'])));
      }
    }
  }
}

/**
 * Implementation of hook_user().
 */
function domain_user_default_user($op, &$edit, &$account, $category = NULL) {
  switch ($op) {
    case 'form':
    case 'register':
      if ((!$category || $category == 'account')
          && (user_access('set own domain default') || user_access('set any user domain default'))) {
        // provide a form on the account settings page to change the user's default domain
        module_load_include('inc', 'domain_user_default', 'domain_user_default.admin');
        return _domain_user_default_user_form($op, $edit, $account);
      }
    case 'insert':
    case 'update':
      module_load_include('inc', 'domain_user_default');
      _domain_user_default_user_update($op, $edit, $account);
      break;
    case 'load':
      if ($account->uid > 0) {
        $account->default_domain = domain_user_default_user_default($account);
      }
      else {
        // This section is performed by the optional module, Domain Session Default
      }
      break;
    case 'delete':
      // delete the user's default domain record
      db_query("DELETE FROM {domain_user_default} WHERE uid = %d", $account->uid);
      break;
  }
}

/**
 * Get user's default domain.
 */
function domain_user_default_user_default($account, $reset = FALSE) {
  static $defaults;

  if ($reset) {
    $defaults = array();
  }

  if (!isset($defaults[$account->uid])) {
    $defaults[$account->uid] = db_result(db_query("SELECT domain_id FROM {domain_user_default} WHERE uid = %d", $account->uid));
  }

  return $defaults[$account->uid];
}

/**
 * Return an array of domains, ready for use as an options array for the
 * Drupal Form API.
 *
 * @param boolean include_default - Include the default domain in the list
 * @fixme: this would be better in domains.module, if used elsewhere
 */
function domain_domain_options($include_default = TRUE) {
  $domains = domain_domains();
  $options = array();

  foreach ($domains as $domain) {
    // Cannot pass zero in checkboxes.
    $key = ($domain['domain_id'] == 0) ? -1 : $domain['domain_id'];
    // The domain must be valid, or the user must have domain administration
    // access
    if ($domain['valid'] || user_access('administer domains')) {
      $options[$key] = $domain['sitename'];
    }
  }

  return $options;
}

/**
 * Implementation of hook_block().
 */
function domain_user_default_block($op, $delta = 0, $edit = array()) {
  switch ($op) {
    case 'list' :
      // Switch User's default domain
      $blocks[0] = array(
        'info' => t('Domain User Default: Domain Switcher'),
      );
      return $blocks;

    case 'view' :
      switch ($delta) {
        case 0:
          if (domain_user_default_is_switchable()) {
            module_load_include('inc', 'domain_user_default');
            $block = array(
              'subject' => t('Switch Domain'),
              'content' => drupal_get_form('domain_user_default_domain_switcher_form'),
            );
          }
      }
      return $block;
  }
}

/**
 * Implementation of hook_domainform().
 */
function domain_user_default_domainform(&$form) {
  $form['domain_user_default'] = array(
    '#type' => 'fieldset',
    '#title' => t('User Default Domain settings'),
    '#description' => t('Settings specific to how users with a default domain set are redirected.'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
  );

  $form['domain_user_default']['domain_user_default_force_subdomain_redirect'] = array(
    '#type' => 'radios',
    '#title' => t('User redirect'),
    '#description' => t('If set to only redirect from the primary domain, the user will be able to navigate other subdomains. If set to always redirect, once a user has picked a default domain, they will always be directed to that domain, until they change it.'),
    '#options' => array(
      DOMAIN_USER_DEFAULT_REDIRECT_NEVER   => t('Never redirect'),
      DOMAIN_USER_DEFAULT_REDIRECT_PRIMARY => t('Only from primary domain'),
      DOMAIN_USER_DEFAULT_REDIRECT_ALWAYS  => t("From any subdomain other than the user's default"),
    ),
    '#default_value' => variable_get('domain_user_default_force_subdomain_redirect', DOMAIN_USER_DEFAULT_REDIRECT_PRIMARY),
  );

  // redirect behavior section
  $form['domain_user_default']['domain_user_default_redirect_behavior'] = array(
    '#type' => 'fieldset',
    '#title' => t('Redirect Behavior'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
    '#description' => t('These settings determine which pages should or should not be directed.'),
  );
  $form['domain_user_default']['domain_user_default_redirect_behavior']['domain_user_default_redirect_behavior'] = array(
    '#type' => 'radios',
    '#title' => t('Redirect on certain pages'),
    '#options' => array(
      0 => t('Redirect on every path except those listed.'),
      1 => t('Redirect only on the paths listed.'),
    ),
    '#default_value' => variable_get('domain_user_default_redirect_behavior', 0),
  );
  $form['domain_user_default']['domain_user_default_redirect_behavior']['domain_user_default_redirect_paths'] = array(
    '#type' => 'textarea',
    '#title' => t('Paths'),
    '#description' => t("Enter one page per line as Drupal paths. The '*' character is a wildcard. Example paths are %blog for the blog page and %blog-wildcard for every personal blog. %front is the front page.", array('%blog' => 'blog', '%blog-wildcard' => 'blog/*', '%front' => '<front>')),
    '#default_value' => variable_get('domain_user_default_redirect_paths', "admin/*\nhelp/*"),
  );

  $form['domain_user_default']['domain_user_default_display_redirect_message'] = array(
    '#type' => 'radios',
    '#title' => t('Display redirect message'),
    '#description' => t('If the above option is set to <em>never</em> or to only redirect from the primary domain, setting this option to <em>yes</em> will display a link for the user when they are browsing a domain other than their default domain'),
    '#options' => array(0 => t('No'), 1 => t('Yes')),
    '#default_value' => variable_get('domain_user_default_display_redirect_message', 0),
  );
  $form['domain_user_default']['domain_user_default_display_domain_set_message'] = array(
    '#type' => 'radios',
    '#title' => t('Display message when default domain is set'),
    '#description' => t("Setting this option to <em>yes</em> will display a message when a user's default domain is updated."),
    '#options' => array(0 => t('No'), 1 => t('Yes')),
    '#default_value' => variable_get('domain_user_default_display_domain_set_message', 0),
  );
  if (module_exists('domain_geolocalization')) {
    // Add option to automatically set on a search that only returns 1 result.
    $form['domain_user_default']['domain_user_default_geolocalization_search_result_behavior'] = array(
      '#type' => 'radios',
      '#title' => t('GeoLocalization Search Result Behavior'),
      '#options' => array(DOMAIN_USER_DEFAULT_GEOLOCALIZATION_AUTO_SET_NEVER => t('Never automatically set default'), DOMAIN_USER_DEFAULT_GEOLOCALIZATION_AUTO_SET_SINGLE => t('Set default automatically if only 1 result is returned'), DOMAIN_USER_DEFAULT_GEOLOCALIZATION_AUTO_SET_TOP => t('Set default automatically to top search result')),
      '#description' => t('Determines the behavior when a user is searching for domains by proximity to a zipcode'),
      '#default_value' => variable_get('domain_user_default_geolocalization_search_result_behavior', DOMAIN_USER_DEFAULT_GEOLOCALIZATION_AUTO_SET_NEVER),
    );

    // Add option to automatically update the global $user object when a user
    // is browsing a different domain.
    $form['domain_user_default']['domain_geolocalization_update_default_on_link'] = array(
      '#type' => 'radios',
      '#title' => t('Update $user object on un-redirected paths'),
      '#description' => t("<strong>Advanced use only</strong>: By setting this option to <em>Yes</em> the global $user object will be updated to reflect the $_domain global on domains where the user <em>isn't</em> automatically redirected."),
      '#options' => array(
        DOMAIN_USER_DEFAULT_GEOLOCALIZATION_UPDATE_USER_NEVER => t('Never'),
        DOMAIN_USER_DEFAULT_GEOLOCALIZATION_UPDATE_USER_PAGE => t('During page load only'),
        DOMAIN_USER_DEFAULT_GEOLOCALIZATION_UPDATE_USER_PERMANENT => t('Update permanently')
      ),
      '#default_value' => variable_get('domain_geolocalization_update_default_on_link', DOMAIN_USER_DEFAULT_GEOLOCALIZATION_UPDATE_USER_NEVER),
    );
  }
}

/**
 * Implementation of hook_domainupdate().
 */
function domain_user_default_domainupdate($op, $domain, $form_state = array()) {
  switch ($op) {
    case 'delete':
      // reset any users using this domain back to the primary domain
      db_query("DELETE FROM {domain_user_default} WHERE domain_id = %d", $domain['domain_id']);
  }
}

/**
 * Determine if the domain default can be switched and stored.
 */
function domain_user_default_is_switchable() {
  global $user;
  if ($user->uid > 0) {
    // authenticated user
    return user_access('set own domain default');
  }

  // unauthenticated user must have permissions, and sessions enabled, and the
  // Domain Session Default module must be enabled.
  return module_exists('domain_session_default') && user_access('set own domain default') && session_api_available();
}

/**
 * Determine if a redirect should be done.
 * @return boolean - TRUE if no redirect needs to be done
 */
function _domain_user_default_no_redirect() {
  // behavior
  $behavior = variable_get('domain_user_default_redirect_behavior', 0);

  // paths to match
  $path_redirects = variable_get('domain_user_default_redirect_paths', "admin/*\nhelp/*");
  $path = drupal_get_path_alias($_GET['q']);
  $matches = drupal_match_path($path, $path_redirects);
  if ($path != $_GET['q']) {
    // match either path or alias
    $matches = $matches || drupal_match_path($_GET['q'], $path_redirects);
  }

  // behavior set to 0 indicates a redirect except on matches
  // behavior set to 1 indicates a redirect only on matches
  return $matches xor $behavior;
}

/**
 * Retrive the number of users that have given domain marked as their default.
 * If no domain id is given return user count for all domains
 * @return array
 */
function domain_user_default_get_default_user_count($domain_id = 'all') {
  if ($domain_id == 'all') {
    $result= db_query("SELECT domain_id, count(uid) as count FROM {domain_user_default} GROUP BY domain_id");
    while ($data = db_fetch_array($result)) {
      $user_count[$data['domain_id']] = $data['count'];
    }
  }
  else {
    $count = db_result(db_query("SELECT count(uid) FROM {domain_user_default} WHERE domain_id = %d", $domain_id));
    $user_count[$domain_id] = $count;
  }
  return $user_count;
}


/**
 * Determine if a path is internal to this module.
 */
function _domain_user_default_is_internal_path() {
  $internal_paths = array(
    'search/domain*',
    'domain-user-default/set*',
    'domains',
    'domains/*',
  );
  if (module_exists('domain_geolocalization')) {
    $internal_paths[] = 'domain-geolocalization*';
  }
  $internal_paths = implode("\n", $internal_paths);

  $path = drupal_get_path_alias($_GET['q']);
  $matches = drupal_match_path($path, $internal_paths);
  if ($path != $_GET['q']) {
    // Match path or alias.
    $matches = $matches || drupal_match_path($_GET['q'], $internal_paths);
  }

  return $matches;
}
