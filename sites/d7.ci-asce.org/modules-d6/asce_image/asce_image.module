<?php
// $Id$

/*
 * Implementation of hook_menu().
 * 
 * The array of items are as follows:
 * 
 * "title": Required. The untranslated title of the menu item.
 * "title callback": Function to generate the title, defaults to t(). If you require only the raw string to be output, set this to FALSE.
 * "title arguments": Arguments to send to t() or your custom callback.
 * "description": The untranslated description of the menu item.
 * "page callback": The function to call to display a web page when the user visits the path. If omitted, the parent menu item's callback will be used instead.
 * "page arguments": An array of arguments to pass to the page callback function. Integer values pass the corresponding URL component (see arg()).
 * "access callback": A function returning a boolean value that determines whether the user has access rights to this menu item. Defaults to user_access() unless a value is inherited from a parent menu item..
 * "access arguments": An array of arguments to pass to the access callback function. Integer values pass the corresponding URL component.
 * "file": A file that will be included before the callbacks are accessed; this allows callback functions to be in separate files. The file should be relative to the implementing module's directory unless otherwise specified by the "file path" option.
 * "file path": The path to the folder containing the file specified in "file". This defaults to the path to the module implementing the hook.
 * "weight": An integer that determines relative position of items in the menu; higher-weighted items sink. Defaults to 0. When in doubt, leave this alone; the default alphabetical order is usually best.
 * "menu_name": Optional. Set this to a custom menu if you don't want your item to be placed in Navigation.
 * "type": A bitmask of flags describing properties of the menu item. Many shortcut bitmasks are provided as constants in menu.inc:
 *          MENU_NORMAL_ITEM: Normal menu items show up in the menu tree and can be moved/hidden by the administrator.
 *          MENU_CALLBACK: Callbacks simply register a path so that the correct function is fired when the URL is accessed.
 *          MENU_SUGGESTED_ITEM: Modules may "suggest" menu items that the administrator may enable.
 *          MENU_LOCAL_TASK: Local tasks are rendered as tabs by default.
 *          MENU_DEFAULT_LOCAL_TASK: Every set of local tasks should provide one "default" task, that links to the same path as its parent when clicked.
 * If the "type" key is omitted, MENU_NORMAL_ITEM is assumed.
 */
       
function asce_image_menu() {
  $items['node/%node/attach-images'] = array(
    'title' => t('Image Attach'),
    'description' => t('Attach images to content.'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('asce_image_attach_image_to_node_form', 1),
    'access arguments' => array('attach images'),
    'file' => 'asce_image.pages.inc',
  );
  return $items;
}

/*
 *  Implementation of hook_enable
 */
function asce_image_enable() {
	$record->weight = 5;
	$record->filename = drupal_get_path('module', 'asce_image') . '/asce_image.module';
	drupal_write_record('system', $record, 'filename');
}

function asce_image_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == 'image_node_form') {
    array_unshift($form['buttons']['submit']['#submit'], 'asce_demo_node_form_submit');
    //drupal_set_message('$form_state before form submitted:' . kpr($form_state, TRUE));
   // drupal_set_message('$form before form submitted:' . kpr($form, TRUE));
    if (is_null($form['nid']['#value'])) {
      //drupal_set_message('A new node is being created.');
      if (isset($_GET['gids'])) {
        $node = node_load($_GET['gids'][0]);
        //drupal_set_message('New node was created from ' . $node->title);
        // Now, based on group id we check to see if a gallery is set up
        // The Image module vocabulary for Image Galleries is vid=7; however this could differ based on
        // what has been created. So check and make sure the vid is accurate
        // To make things more organized, we will create a new image gallery based on the group name
        // So, first we need to check and see if a gallery exists like this already
        $vid = 7;
        $sql = "SELECT * FROM term_data WHERE vid=%d AND name='%s'";
        $name = $node->title . ' root image gallery';
        $results = db_query($sql, $vid, $name);
        
        while ($gallery = db_fetch_object($results)) {
          //$possible_galleries[$gallery->tid] = $name;
          $gallery_tid = $gallery->tid;
          $gallery_name = $gallery->name;
          $gallery_exists = TRUE;
        }
        // Now that we have a list of galleries that are named the same as the group name
        if (!$gallery_exists) { // We need to create the gallery
          //drupal_set_message('Create the gallery');
          $taxonomy['name'] = $name;
          $taxonomy['vid'] = 7;
          taxonomy_save_term($taxonomy);
          $form['taxonomy'][$vid]['#options'][]->option = array($taxonomy['tid'] => $name);
          $gallery_tid = $taxonomy['tid'];
          drupal_set_message('The image gallery <em>' . $name . '</em> has been created. You are the first person to upload an image.');
        } 
        // Now make sure the default is set so the user does not have to select it
        $form['taxonomy'][$vid]['#default_value'][] = $gallery_tid;        
      }
    }
  }
}

/**
 * Implementation of hook_theme().
 */
function asce_image_theme() {
  return array(
    'asce_image_attach_image_to_node_form' => array(
      'arguments' => array(
        'form' => NULL,
      ),
    ),
  );
}
