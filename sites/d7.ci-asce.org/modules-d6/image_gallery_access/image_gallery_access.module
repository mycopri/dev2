<?php
// $Id: image_gallery_access.module,v 1.32 2011/01/09 15:05:20 salvis Exp $

/**
 * @file image_gallery_access.module
 *
 * This module uses form_alter to add permissions to image galleries.
 */

/**
 * Implementation of hook_node_grants().
 *
 * This function supplies the image gallery access grants. image_gallery_access
 * simply uses roles as ACLs, so rids translate directly to gids.
 */
function image_gallery_access_node_grants($user, $op) {
  $grants['image_gallery_access'] = array_keys($user->roles);
  return $grants;
}

/**
 * Implementation of hook_node_access_records().
 *
 * Returns a list of grant records for the passed in node object.
 * Checks to see if maybe we're being disabled.
 */
function image_gallery_access_node_access_records($node) {
  if (!image_gallery_access_enabled()) {
    return;
  }

  static $grants = array();
  if ($node->type == 'image' && isset($node->taxonomy) && is_array($node->taxonomy)) {
    $return = array();
    foreach ($node->taxonomy as $key => $value) {
      $tids = array();
      if (is_object($value)) { //       tid -> taxa                (rebuild permissions)
        $tid = $key;
        $vid = $value->vid;
      }
      elseif (is_array($value)) { //    vid -> array(tid => tid)   (Multiple select, node create)
        $vid = $key;
        $tids = $value;
      }
      else { //                         vid -> tid
        $vid = $key;
        $tid = $value;
      }
      if ($vid == _image_gallery_get_vid()) {
        if (empty($tids)) {
          $tids = array($tid);
        }
        foreach ($tids as $tid) {
          if (!isset($grants[$tid])) {
            $grants[$tid] = array();
            $result = db_query('SELECT * FROM {image_gallery_access} WHERE tid = %d', $tid);
            while ($grant = db_fetch_object($result)) {
              $grants[$tid][$grant->rid] = array(
                'realm' => 'image_gallery_access',
                'gid' => $grant->rid,
                'grant_view' => $grant->grant_view,
                'grant_update' => $grant->grant_update,
                'grant_delete' => $grant->grant_delete,
                'priority' => $grant->priority,
              );
            }
            //drupal_set_message("image_gallery_access_node_access_records($node->nid) (tid=$tid) returns ". var_export($grants[$tid], TRUE), 'status');
          }
          foreach ($grants[$tid] as $grant) {
            $gid = $grant['gid'];
            if (!isset($return[$gid])) {
              $return[$gid] = $grant;
            }
            else {
              // OR the grants for each $tid
              foreach (array('grant_view', 'grant_update', 'grant_delete') as $key) {
                $return[$gid][$key] = $return[$gid][$key] | $grant[$key];
              }
            }
          }
        }
      }
    }
    //drupal_set_message("image_gallery_access_node_access_records($node->nid) returns ". var_export(array_values($return), TRUE), 'status');
    if (!empty($return)) {
      return array_values($return);
    }
  }
}

/**
 * Implementation of hook_init().
 *
 * Deny access to gallery if the user does not have access to it.
 */
function image_gallery_access_init() {
  if (!function_exists('user_access')) {
    // Page is cached; bail.
    return;
  }

  if (arg(0) == 'image' && arg(1) == 'tid' && is_numeric(arg(2))) {
    if (!image_gallery_access_access(arg(2), 'view')) {
      drupal_access_denied();
      module_invoke_all('exit');
      exit;
    }
  }
}

/**
 * Implementation of hook_form_alter().
 *
 * Alter the node create/edit form and various admin forms.
 */
function image_gallery_access_form_alter(&$form, &$form_state, $form_id) {
  //dpm($form, "form_id($form_id)");
  if (isset($form['type']['#value']) && $form['type']['#value'] .'_node_form' == $form_id) {
    module_load_include('node.inc', 'image_gallery_access');
    _image_gallery_access_node_form($form, $form_state);
  }
  elseif ($form_id == 'image_gallery_admin_form') {
    module_load_include('admin.inc', 'image_gallery_access');
    _image_gallery_access_admin_form($form, $form_state);
  }
  elseif ($form_id == 'user_admin_role') {
    module_load_include('admin.inc', 'image_gallery_access');
    _image_gallery_access_user_admin_role_form($form, $form_state);
  }
  elseif ($form_id == 'content_access_admin_settings' && empty($_POST) && arg(3) == 'image') {
    module_load_include('admin.inc', 'image_gallery_access');
    _image_gallery_access_content_access_admin_form();
  }
}

/**
 * Implementation of hook_db_rewrite_sql().
 *
 * Because in order to restrict the visible image galleries, we have to rewrite
 * the sql. This is because there isn't a node_access equivalent for
 * taxonomy. There should be.
 */
function image_gallery_access_db_rewrite_sql($query, $primary_table, $primary_field, $args) {
  global $user;
  //dpm($query, "image_gallery_access_db_rewrite_sql($primary_table, $primary_field)");
  // Unlike FA, we don't need to display all galleries under admin/content/image,
  // because they can't be reordered JS-wise. So just filter them here:
  $sql = NULL;
  switch ($primary_field) {
    case 'tid':
      if ($user->uid == 1
        || user_access('administer nodes') && strpos($_GET['q'], 'node/add/image') === FALSE) {
        break;
      }
      if (strpos($_GET['q'], 'node/add/image') !== FALSE) {
        $required_access = 'create';
      }
      else {
        $required_access = 'view';
      }
      $roles = implode(', ', array_keys($user->roles));
      $sql['join'] = "LEFT JOIN {image_gallery_access} iga ON $primary_table.tid = iga.tid
                      LEFT JOIN {acl} acl_iga ON acl_iga.name = ". ($GLOBALS['db_type'] == 'pgsql' ? 'CAST(' : '')
                                                              ."$primary_table.tid". ($GLOBALS['db_type'] == 'pgsql' ? ' AS VARCHAR)' : '')
                                                                                  ." AND acl_iga.module = 'image_gallery_access'
                      LEFT JOIN {acl_user} aclu_iga ON aclu_iga.acl_id = acl_iga.acl_id AND aclu_iga.uid = $user->uid";
      $sql['where'] = "(iga.grant_$required_access >= 1 AND iga.rid IN ($roles)) OR iga.tid IS NULL OR aclu_iga.uid = $user->uid";
      $sql['distinct'] = 1;
      break;
  }
  //dpm($sql, "rewritten:");
  return $sql;
}

/**
 * Implementation of hook_nodeapi().
 *
 * Add ACL data to fresh image posts.
 */
function image_gallery_access_nodeapi(&$node, $op, $teaser = NULL, $page = NULL) {
  static $old_tid = NULL;

  if ($node && $node->type == 'image' && isset($node->taxonomy)) {
    $taxas = $node->taxonomy;
    if (!isset($taxas[_image_gallery_get_vid()])) {
      return;
    }
    $tid = $taxas[_image_gallery_get_vid()];
    switch ($op) {
      case 'presave':
        $old_tid = $tid;
        break;

      case 'update':
        if (!empty($old_tid)) {
          if (!empty($tid) && $tid == $old_tid) {
            return;
          }
          acl_node_clear_acls($node->nid, 'image_gallery_access');
        }
        // Deliberate no break -- for changed and for previously unassigned terms we need an insert.

      case 'insert':
        if (!empty($node->tid)) {
          $acl_id = acl_get_id_by_name('image_gallery_access', $node->tid);
          acl_node_add_acl($node->nid, $acl_id, 1, 1, 1);
        }
        $old_tid = NULL;
        break;
    }
  }
}

/**
 * Get an array of moderator UIDs or NULL.
 */
function image_gallery_access_get_moderator_uids($tid) {
  if ($acl_id = acl_get_id_by_name('image_gallery_access', $tid)) {
    if ($uids = acl_get_uids($acl_id)) {
      return $uids;
    }
  }
}

/**
 * This is also required by ACL module.
 */
function image_gallery_access_enabled($set = NULL) {
  static $enabled = TRUE;
  if ($set !== NULL) {
    $enabled = $set;
  }
  return $enabled;
}

/**
 * See if a given user has access to an image gallery.
 *
 * $tid -- the tid of the image gallery
 * $type -- view, update, delete or create
 * $account -- the account to test for; if NULL use current user
 * $administer_nodes_sees_everything -- pass FALSE to ignore the 'administer nodes' permission
 *
 * Return:
 *   FALSE - access not granted
 *   1     - access granted
 *   2     - access granted for gallery moderator
 */
function image_gallery_access_access($tid, $type, $account = NULL, $administer_nodes_sees_everything = TRUE) {
  static $cache = array();
  if (!$account) {
    global $user;
    $account = $user;
  }

  if ($account->uid == 1 ||
      $administer_nodes_sees_everything && user_access('administer nodes', $account) && array_search($type, array('view', 'update', 'delete')) !== FALSE) {
    return 1;
  }

  if (!isset($cache[$account->uid][$tid][$type])) {
    $roles = array_keys($account->roles);
    $result = db_result(db_query("SELECT tid FROM {image_gallery_access} WHERE rid IN (". db_placeholders($roles, 'int') .") AND grant_". $type ." = 1 AND tid = %d", array_merge($roles, array($tid))));

    if ($result) {
      $cache[$account->uid][$tid][$type] = 1;
    }
    else {
      // check our moderators too
      $acl_id = acl_get_id_by_name('image_gallery_access', $tid);
      $result = db_result(db_query("SELECT uid FROM {acl_user} WHERE acl_id = %d AND uid = %d", $acl_id, $account->uid));
      if ($result) {
        $cache[$account->uid][$tid][$type] = 2;
      }
      else {
        $cache[$account->uid][$tid][$type] = FALSE;
      }
    }
  }
  return $cache[$account->uid][$tid][$type];
}

/**
 * Implementation of hook_menu_alter().
 *
 * Remove the 'Image galleries' menu item if no image galleries are visible.
 */
function image_gallery_menu_alter(&$items) {
  if (!empty($items['image'])) {
    //dpm($items['image'], 'hook_menu_alter($items[\'image\'])');
    if (!empty($items['image']['access callback']) || $items['image']['access arguments'][0] != 'access content') {
      drupal_set_message(t('Unexpected access specification for the %image menu path; @Image_Gallery_Access cannot control its access.', array('%image' => 'image', '@Image_Gallery_Access' => 'Image Gallery Access')), 'error');
      return;
    }
    $items['image']['access callback'] = '_image_gallery_access_access_any_gallery';
    unset($items['image']['access arguments']);
  }
}

/**
 * Access callback for the 'image' menu item.
 *
 * Returns TRUE if the user has at least one role that can access
 * at least one gallery.
 */
function _image_gallery_access_access_any_gallery($account = NULL) {
  global $user;
  static $return = array();

  if (!isset($account)) {
    $account = $user;
  }

  if (!isset($return[$account->uid])) {
    if ($account->uid == 1) {
      return $return[$account->uid] = TRUE;
    }
    if (!user_access('access content')) {
      return $return[$account->uid] = FALSE;
    }
    $rids = variable_get('image_gallery_access_rids', NULL);
    if (!isset($rids)) {
      $rids = array();
      $result = db_query("SELECT iga.rid FROM {image_gallery_access} iga WHERE iga.grant_view > 0 GROUP BY iga.rid");
      while ($role = db_fetch_object($result)) {
        $rids[] = $role->rid;
      }
      variable_set('image_gallery_access_rids', $rids);
    }
    if (!empty($rids)) {
      foreach ($rids as $rid) {
        if (isset($account->roles[$rid])) {
          return $return[$account->uid] = TRUE;
        }
      }
    }
    $return[$account->uid] = FALSE;
  }
  return $return[$account->uid];
}

/**
 * Implementation of hook_taxonomy().
 *
 * Delete {image_gallery_access} records when image galleries are deleted.
 */
function image_gallery_access_taxonomy($op, $type, $array = NULL) {
  //dpm($array, "hook_taxonomy($op, $type)");
  if ($type = 'term' && $op == 'delete' && $array['vid'] == _image_gallery_get_vid()) {
    db_query("DELETE FROM {image_gallery_access} WHERE tid = %d", $array['tid']);
    variable_del('image_gallery_access_rids'); // clear cache
  }
}

/**
 * Implementation of hook_views_api().
 */
function image_gallery_access_views_api() {
  return array(
    'api' => 2,
    'path' => drupal_get_path('module', 'image_gallery_access') .'/views',
  );
}

/**
 * Implementation of hook_node_access_explain().
 */
function image_gallery_access_node_access_explain($row) {
  static $roles = NULL;
  if ($row->realm == 'image_gallery_access') {
    if (!isset($roles)) {
      $roles = user_roles();
    }
    if (isset($roles[$row->gid])) {
      return array($roles[$row->gid]);
    }
    return array('(unknown gid)');
  }
}
