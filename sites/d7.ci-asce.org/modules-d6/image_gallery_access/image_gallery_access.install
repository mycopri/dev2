<?php
// $Id: image_gallery_access.install,v 1.15 2010/07/14 12:22:50 salvis Exp $

/**
 * @file
 * Install, update and uninstall functions for the image_gallery_access module.
 *
 */

/**
 * Implementation of hook_install().
 */
function image_gallery_access_install() {
  drupal_install_schema('image_gallery_access');
  db_query("UPDATE {system} SET weight = 2 WHERE name = 'image_gallery_access'");

  if (function_exists('_image_gallery_get_vid') && ($vid = _image_gallery_get_vid())) {
    $result = db_query("
      SELECT t.tid
        FROM {term_data} t
        LEFT JOIN {image_gallery_access} iga ON t.tid = iga.tid
        WHERE iga.tid IS NULL AND t.vid = %d
      ", $vid);
    $grant_create_by_rid = array(
      DRUPAL_ANONYMOUS_RID => 0,
      DRUPAL_AUTHENTICATED_RID => 1,
    );
    while ($td = db_fetch_object($result)) {
      foreach ($grant_create_by_rid as $rid => $grant_create) {
        db_query("
          INSERT INTO {image_gallery_access}
          (tid, rid, grant_view, grant_update, grant_delete, grant_create, priority)
          VALUES(%d, %d, 1, 0, 0, %d, 0)
        ", $td->tid, $rid, $grant_create);
      }
    }
  }
}

/**
 * Implementation of hook_schema().
 */
function image_gallery_access_schema() {
  $schema['image_gallery_access'] = array(
    'description'     => 'The base Image Gallery Access Control table.',
    'fields'          => array(
      'tid'           => array(
        'description' => 'The {term_data}.tid to which this {image_gallery_access} entry applies.',
        'type'        => 'int',
        'not null'    => TRUE,
        'default'     => 0),
      'rid'           => array(
        'description' => 'The {role}.rid to which this {image_gallery_access} entry applies.',
        'type'        => 'int',
        'not null'    => TRUE,
        'default'     => 0),
      'grant_view'    => array(
        'description' => 'Whether to grant "view" permission.',
        'type'        => 'int',
        'size'        => 'tiny',
        'unsigned'    => TRUE,
        'not null'    => TRUE,
        'default'     => 0),
      'grant_update'  => array(
        'description' => 'Whether to grant "update" permission.',
        'type'        => 'int',
        'size'        => 'tiny',
        'unsigned'    => TRUE,
        'not null'    => TRUE,
        'default'     => 0),
      'grant_delete'  => array(
        'description' => 'Whether to grant "delete" permission.',
        'type'        => 'int',
        'size'        => 'tiny',
        'unsigned'    => TRUE,
        'not null'    => TRUE,
        'default'     => 0),
      'grant_create'  => array(
        'description' => 'Whether to grant "create" permission.',
        'type'        => 'int',
        'size'        => 'tiny',
        'unsigned'    => TRUE,
        'not null'    => TRUE,
        'default'     => 0),
      'priority'  => array(
        'description' => 'The priority of this grant.',
        'type'        => 'int',
        'size'        => 'small',
        'not null'    => TRUE,
        'default'     => 0)),
    'indexes'         => array(
      'tid'           => array('tid'),
      'rid'           => array('rid')),
  );
  return $schema;
}

/**
 * Implementation of hook_enable().
 */
function image_gallery_access_enable() {
  variable_del('image_gallery_access_rids');  // clear cache

  if (module_exists('views')) {
    $views = views_get_all_views();
    //dpm($views, 'views_get_all_views()');
    $view = $views['image_gallery'];
    if (!$view->disabled) {
      //dpm($view, 'views_get_all_views()[\'image_gallery\']');
      $display = $view->display['image_gallery_1'];
      //dpm($display, 'views_get_all_views()[\'image_gallery\']->display[\'image_gallery_1\']');
      if ($display->display_options['menu']['type'] == 'none') {
        $display->display_options['menu']['type'] = 'normal';
        $tr = 't';
        $display->display_options['menu']['title'] = $tr('Image galleries');
      }
      $display->display_options['defaults']['access'] = FALSE;
      $display->display_options['access']['type'] = 'image_gallery_access';
      //dpm($view, 'views_get_all_views()[\'image_gallery\'] -- after enabling Image Gallery Access');
      $view->save();
    }
  }
}

/**
 * Implementation of hook_disable().
 */
function image_gallery_access_disable() {
  image_gallery_access_enabled(FALSE);

  if (module_exists('views')) {
    $views = views_get_all_views();
    //dpm($views, 'views_get_all_views()');
    $view = $views['image_gallery'];
    if (!$view->disabled) {
      //dpm($view, 'views_get_all_views()[\'image_gallery\']');
      $display = $view->display['image_gallery_1'];
      unset($display->display_options['defaults']['access']);
      if (count($display->display_options['defaults']) == 0) {
        unset($display->display_options['defaults']);
      }
      unset($display->display_options['access']);
      //dpm($view, 'views_get_all_views()[\'image_gallery\'] -- after disabling Image Gallery Access');
      $view->save();
    }
  }
}

/*
 * Implementation of hook_uninstall().
 */
function image_gallery_access_uninstall() {
  drupal_uninstall_schema('image_gallery_access');
  variable_del('image_gallery_access_batch_threshold');
  variable_del('image_gallery_access_default_template_tid');
  variable_del('image_gallery_access_new_template_tid');
  variable_del('image_gallery_access_provide_moderators_template_variable');
  variable_del('image_gallery_access_rids');
}


/**
 * Purge orphaned grants that were left behind when deleting roles.
 */
function image_gallery_access_update_1() {
  $ret = array();
  $ret[] = update_sql("DELETE FROM {image_gallery_access} WHERE rid NOT IN (SELECT rid from {role})");
  $ret[] = update_sql("DELETE FROM {node_access} WHERE realm = 'image_gallery_access' AND gid NOT IN (SELECT rid from {role})");
  return $ret;
}

/**
 * Add a priority column (will probably not be used until D6).
 */
function image_gallery_access_update_2() {
  $ret = array();
  db_add_field($ret, 'image_gallery_access', 'priority', array(
    'description' => 'The priority of this grant.',
    'type'        => 'int',
    'size'        => 'small',
    'not null'    => TRUE,
    'default'     => 0));
  return $ret;
}

/**
 * Remove bogus rows from the {image_gallery_access} table.
 */
function image_gallery_access_update_6101() {
  $ret = array();
  if ($vid = _image_gallery_get_vid()) {
    $ret[] = update_sql("
      DELETE FROM {image_gallery_access}
      WHERE tid NOT IN (
        SELECT t.tid
        FROM {term_data} t
        WHERE t.vid = $vid
      )
    ");
    if ($ret[0]['success'] && $affected_rows = db_affected_rows()) {
      $ret[0]['query'] = $ret[0]['query'] .'<br />'. $affected_rows .' bogus rows purged.';
    }
  }
  return $ret;
}

