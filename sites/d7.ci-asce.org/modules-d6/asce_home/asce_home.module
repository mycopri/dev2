<?php
// $Id$

/*
 * Implementation of hook_menu().
 * 
 * The array of items are as follows:
 * 
 * "title": Required. The untranslated title of the menu item.
 * "title callback": Function to generate the title, defaults to t(). If you require only the raw string to be output, set this to FALSE.
 * "title arguments": Arguments to send to t() or your custom callback.
 * "description": The untranslated description of the menu item.
 * "page callback": The function to call to display a web page when the user visits the path. If omitted, the parent menu item's callback will be used instead.
 * "page arguments": An array of arguments to pass to the page callback function. Integer values pass the corresponding URL component (see arg()).
 * "access callback": A function returning a boolean value that determines whether the user has access rights to this menu item. Defaults to user_access() unless a value is inherited from a parent menu item..
 * "access arguments": An array of arguments to pass to the access callback function. Integer values pass the corresponding URL component.
 * "file": A file that will be included before the callbacks are accessed; this allows callback functions to be in separate files. The file should be relative to the implementing module's directory unless otherwise specified by the "file path" option.
 * "file path": The path to the folder containing the file specified in "file". This defaults to the path to the module implementing the hook.
 * "weight": An integer that determines relative position of items in the menu; higher-weighted items sink. Defaults to 0. When in doubt, leave this alone; the default alphabetical order is usually best.
 * "menu_name": Optional. Set this to a custom menu if you don't want your item to be placed in Navigation.
 * "type": A bitmask of flags describing properties of the menu item. Many shortcut bitmasks are provided as constants in menu.inc:
 *          MENU_NORMAL_ITEM: Normal menu items show up in the menu tree and can be moved/hidden by the administrator.
 *          MENU_CALLBACK: Callbacks simply register a path so that the correct function is fired when the URL is accessed.
 *          MENU_SUGGESTED_ITEM: Modules may "suggest" menu items that the administrator may enable.
 *          MENU_LOCAL_TASK: Local tasks are rendered as tabs by default.
 *          MENU_DEFAULT_LOCAL_TASK: Every set of local tasks should provide one "default" task, that links to the same path as its parent when clicked.
 * If the "type" key is omitted, MENU_NORMAL_ITEM is assumed.
 */
       
function asce_home_menu() {
  $items['node/%node/edit_ci_content_teaser'] = array(
    'title' => t('Edit Teaser'),
    'description' => t('Edit the teaser for ci_content type'),
    'page callback' => 'asce_home_edit_teaser',
    'page arguments' => array(1),
    'access arguments' => array('administer nodes'),
    'file' => 'asce_home.pages.inc',
    'menu_name' => 'CI',
    'weight' => 10,
    'type' => MENU_CALLBACK,
  );
	
  return $items;
}

function asce_home_perm() {
	return array('add content to home page');
}

function asce_home_tab_access($op, $type) {
	if (user_access('add content to home page')) {
		if (node_access($op, $type)) {
			if (drupal_is_front_page() || arg(2) == 'ci_content') {
				return TRUE;
			}
		}
	}
}

function asce_home_form_alter(&$form, &$form_state, $form_id) {
	if ($form_id == 'ci_content_node_form') {
		if (arg(2) == 'ci_content') {
			$form['field_ci_home']['#default_value'][0]['value'] = 1;
			$form['buttons']['submit']['#submit'][] = 'asce_student_node_form_submit';
			$form['buttons']['submit']['#submit'][] = 'asce_home_node_form_submit';
			//$form['#programmed'] = TRUE;
		}
		if ($_GET['ci_home']) {
			dsm($form);
			$form['field_front_layout']['#default_value'][0]['value'] = 'left';
			$form['field_ci_home']['#default_value'][0]['value'] = 1;
		}
	}
}

function asce_home_node_form_submit($form, &$form_state) {
  $form_state['redirect'] = 'myhome';
}

function asce_home_tab($node, $op) {
	if ($op == 'ci_content') {
	  module_load_include('inc', 'node', 'node.pages');
	  return node_add('ci_content');
	}	
}

function asce_home_block($op = 'list', $delta = 0, $edit = array()) {
  
  if ($op == 'list') {
    // returns array, with the following key-value pairs:
    //
    // 'info': (required) The human-readable name of the block. This is used to identify the block on administration screens, and is not displayed to non-administrative users.
    // 'cache': A bitmask of flags describing how the block should behave with respect to block caching. The following shortcut bitmasks are provided as constants in block.module:
    //    BLOCK_CACHE_PER_ROLE (default): The block can change depending on the roles the user viewing the page belongs to.
    //    BLOCK_CACHE_PER_USER: The block can change depending on the user viewing the page. This setting can be resource-consuming for sites with large number of users, and should only be used when BLOCK_CACHE_PER_ROLE is not sufficient.
    //    BLOCK_CACHE_PER_PAGE: The block can change depending on the page being viewed.
    //    BLOCK_CACHE_GLOBAL: The block is the same for every user on every page where it is visible.
    //    BLOCK_NO_CACHE: The block should not get cached.
    // 'weight': (optional) Initial value for the ordering weight of this block. Most modules do not provide an initial value, and any value provided can be modified by a user on the block configuration screen.
    // 'status': (optional) Initial value for block enabled status. (1 = enabled, 0 = disabled). Most modules do not provide an initial value, and any value provided can be modified by a user on the block configuration screen.
    // 'region': (optional) Initial value for theme region within which this block is set. Most modules do not provide an initial value, and any value provided can be modified by a user on the block configuration screen. Note: If you set a region that isn't available in the currently enabled theme, the block will be disabled.
    // 'visibility': (optional) Initial value for the visibility flag, which tells how to interpret the 'pages' value. Possible values are:
    //    0: Show on all pages except listed pages. 'pages' lists the paths where the block should not be shown.
    //    1: Show only on listed pages. 'pages' lists the paths where the block should be shown.
    //    2: Use custom PHP code to determine visibility. 'pages' gives the PHP code to use.
    //  Most modules do not provide an initial value for 'visibility' or 'pages', and any value provided can be modified by a user on the block configuration screen.
    // 'pages': (optional) See 'visibility' above.

    $blocks[0]['info'] = t('CI Home - Admin');
    $blocks[0]['cache'] = BLOCK_NO_CACHE;
    
    return $blocks;
  }

  if ($op == 'view') {
    if ($delta == 0) {
      $block = asce_home_block_admin();
    }
    return $block;
  }

  if ($op == 'configure') {
    $form = array();
    if ($delta == 0) {
      /*
    	$form['field1']['authenticated'] = array(
        '#type' => 'textarea',
        '#title' => t('Content to display when user is logged in'),
        '#default_value' => t('User is not logged in display something.'),
      );
      $form['field1']['format'] = filter_form(2, 1, array('field1'));
      
      $form['field2']['anonymous'] = array(
        '#type' => 'textarea',
        '#title' => t('Content to display when user is <em><b>not</b></em> logged in.'),
        '#default_value' => t('User is logged in display something.'),
      );
      $form['field2']['format'] = filter_form(2, 1, array('field2'));
      
      $form['field3']['auth_started'] = array(
        '#type' => 'textarea',
        '#title' => t('Content to display when user has finished application.'),
        '#default_value' => t('User has finished application.'),
      );
      $form['field3']['format'] = filter_form(2, 1, array('field3'));
      */
    }
    return $form;
  }
  
  if ($op == 'save') {
    if ($delta == 0) {
    }
  }
}

function asce_home_block_admin() {
  if (user_access('administer nodes')) {
    $content .= '  <div class="admin-links panel-hide">';
    $content .= '    <ul class="links">';
    $content .= '      <li class="update first last">';
    $content .=          l('Edit text', 'admin/build/block/configure/asce_home/0', array('query' => drupal_get_destination()));
    $content .= '      </li>';
    $content .= '    </ul>';    
    $content .= '  </div>';
  }
  if (user_access('administer nodes')) {
    $links = _asce_home_admin_links();
    $block['content'] .= theme('item_list', $links);
  }
  $block['subject'] = t('Admin');
  return $block;
}

/*
 *  Helper function
 */
function _asce_home_admin_links() {
	$edit_page_path  = 'admin/build/pages/nojs/operation/page-ci_front_page/';
	$edit_page_path .= 'handlers/page_ci_front_page_panel_context/content';
  $links['edit-page'] = l('Edit this panel page', $edit_page_path, array('query' => drupal_get_destination()));
  $links['add-announcement'] = l('Add content', 'node/add/ci-content', 
    array('query' => array('ci_home' => TRUE, 'destination' => $_GET['q'])));
  return $links;
}

