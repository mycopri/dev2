<?php
// $Id$

/*
 *  Implementation of hook_enable
 */
function asce_emi_enable() {
	$record->weight = 10;
	$record->filename = drupal_get_path('module', 'asce_emi') . '/asce_emi.module';
	drupal_write_record('system', $record, 'filename');
}

function asce_emi_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == 'content_field_overview_form') {
  	//drupal_set_message('Fields overview debug...');
  }
}

/*
 * Implementation of hook_menu().
 * 
 * The array of items are as follows:
 * 
 * "title": Required. The untranslated title of the menu item.
 * "title callback": Function to generate the title, defaults to t(). If you require only the raw string to be output, set this to FALSE.
 * "title arguments": Arguments to send to t() or your custom callback.
 * "description": The untranslated description of the menu item.
 * "page callback": The function to call to display a web page when the user visits the path. If omitted, the parent menu item's callback will be used instead.
 * "page arguments": An array of arguments to pass to the page callback function. Integer values pass the corresponding URL component (see arg()).
 * "access callback": A function returning a boolean value that determines whether the user has access rights to this menu item. Defaults to user_access() unless a value is inherited from a parent menu item..
 * "access arguments": An array of arguments to pass to the access callback function. Integer values pass the corresponding URL component.
 * "file": A file that will be included before the callbacks are accessed; this allows callback functions to be in separate files. The file should be relative to the implementing module's directory unless otherwise specified by the "file path" option.
 * "file path": The path to the folder containing the file specified in "file". This defaults to the path to the module implementing the hook.
 * "weight": An integer that determines relative position of items in the menu; higher-weighted items sink. Defaults to 0. When in doubt, leave this alone; the default alphabetical order is usually best.
 * "menu_name": Optional. Set this to a custom menu if you don't want your item to be placed in Navigation.
 * "type": A bitmask of flags describing properties of the menu item. Many shortcut bitmasks are provided as constants in menu.inc:
 *          MENU_NORMAL_ITEM: Normal menu items show up in the menu tree and can be moved/hidden by the administrator.
 *          MENU_CALLBACK: Callbacks simply register a path so that the correct function is fired when the URL is accessed.
 *          MENU_SUGGESTED_ITEM: Modules may "suggest" menu items that the administrator may enable.
 *          MENU_LOCAL_TASK: Local tasks are rendered as tabs by default.
 *          MENU_DEFAULT_LOCAL_TASK: Every set of local tasks should provide one "default" task, that links to the same path as its parent when clicked.
 * If the "type" key is omitted, MENU_NORMAL_ITEM is assumed.
 */
       
function asce_emi_menu() {
  $items['emi'] = array(
    'title' => t('Engineering Mechanics Institute'),
    //'title callback' => ,
    //'title arguments' => ,
    'description' => t('Main Menu Page for EMI menu callbacks.'),
    'page callback' => 'asce_emi_page',
    //'page arguments' => ,
    //'access callback' => 'asce_staff_access',
    'access arguments' => array('access emi functionality'),
    //'file' => 'asce_staff.admin.inc',
    //'file path' => ,
    //'weight' => ,
    'menu_name' => 'primary-links',
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );
  return $items;
}

function asce_emi_perm() {
  return array('access emi functionality');
}

function asce_emi_page() {
	drupal_set_title('EMI Links for Administrators and Staff');
	$output = '<p>This page provides links to useful pages that are specific to the EMI site.</p>';
	$output .= l('Add a Research Group Profile', 'node/add/emi-research-group-profile') . '<br/>';
	$output .= l('View a list of existing Research Group Profiles', 'research-group-profiles') . '<br/>';
	return $output;
}
