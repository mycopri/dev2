<?php
function ci_tools_menu() {
	// Admin menu items
	$base = array(
    'access callback' => 'ci_tools_access',
    'file' => 'ci_tools.admin.inc',
    'page callback' => 'ci_tools_db_backup',
  );
   
  $items['admin/ci-tools'] = array(
    'title' => t('CI Tools'),
    'description' => t('CI Tools'),
    'page callback' => 'ci_tools_page',
  ) + $base;
  $items['admin/ci-tools/db-backup'] = array(
    'title' => t('Backup DB'),
    'description' => t('Backup database'),
    'page callback' => 'ci_tools_db_backup',
  ) + $base;
	$items['admin/ci-tools/delete-images'] = array(
    'title' => 'Delete Images', 
    'page callback' => 'drupal_get_form',
    'page arguments' => array('delete_images'),
  ) + $base;
	return $items;
}

function ci_tools_page() {
	return 'CI Tools';
}

function ci_tools_access() {
	global $user;
	
	if ($user_id == 0 || $user_id == 102) {
		return TRUE;
	}
}

function delete_images() {
	$form['size'] = array(
		'#type' => 'select',
		'#title' => t('Delete how many image nodes per pass?'),
		'#description' => t('Choose a value and click the Begin button.'),
		'#options' => drupal_map_assoc(array(1, 5, 10, 25, 50)),
	);
	$form['submit'] = array(
		'#type' => 'submit',
		'#value' => t('Begin'),
	);
	return $form;
}

function delete_images_submit() {
	$size = $form_state['values']['size'];
	$batch = array(
		'operations' => array(
			array('_delete_images', array($size)),
		),
		'finished' => '_delete_images_finished',
		'title' => t('Deleting Images'),
		'init_message' => t('The image deletion process is beginning.'),
		'progress_message' => t('Deleted @current of @total.'),
		'error_message' => t('The deletion process encountered an error.'),
	);
	batch_set($batch);
}

function _delete_images($size, &$context) {
	// Set the main SELECT statement
	$sql = "SELECT %s 
				FROM node 
				LEFT JOIN (SELECT image.nid, image.fid image_fid, files.fid files_fid 
					FROM image LEFT JOIN files ON image.fid = files.fid 
					WHERE files.fid IS NULL) AS mf 
				ON node.nid = mf.nid 
				WHERE node.type='image' 
				AND mf.image_fid IS NOT NULL %s";
	$sql = "SELECT node.nid node_nid, node.title node_title FROM node WHERE node.type='congress_session_proposals'";
	// Initialize sandbox the first time through.
	if (!isset($context['sandbox']['progress'])) {
		$fields = ' count(*) ';
		$context['sandbox']['progress'] = 0;
		//$context['sandbox']['current_image_id'] = '';
		$context['sandbox']['max'] = db_result(db_query($sql, $fields));
	}
	// Retrieve the first set of image nodes to be deleted
	$fields = ' node.nid node_nid, node.title node_title, mf.image_fid, mf.files_fid ';
	$fields = '';
	if ($size) {
		$limit = ' LIMIT 0, ' . $size;
	}
	$results = db_query($sql, $fields, $limit);
	//dpm($context);
	while ($row = db_fetch_object($results)) {
		$context['sandbox']['progress']++;
		//$context['sandbox']['current_image_id'] = $row->node_title . ' nid=' . $row->node_nid;
		$context['message'] = t('Deleting image %image', array('%image' =>
		$row->node_title . ' nid=' . $row->node_nid));
		// Store usernames in case the the 'finished' callback wants them.
		$context['results'][] = $context['sandbox']['max'] . ' ' . $row->node_title . ' nid=' . $row->node_nid;
		
		node_delete($row->node_nid);
		//db_query("DELETE FROM image WHERE nid =$row->node_nid");
		//$delete[$row->node_nid] = $row->node_nid;
	}
	// Let the batch engine know how close we are to completion.
	if ($context['sandbox']['progress'] == $context['sandbox']['max']) {
		// Done!
		$context['finished'] = 1;
	}
	else {
		$context['finished'] = $context['sandbox']['progress'] / $context['sandbox']['max'];
	}
}

/**
* Called when all batch operations are complete.
*/
function _delete_images_finished($success, $results, $operations) {
	if ($success) {
		drupal_set_message(t('Image deletion complete.'));
		dpm($results, TRUE);
	}
	else {
		// A fatal error occurred during batch processing.
		$error_operation = reset($operations);
		$operation = array_shift($error_operation);
		$arguments = array_shift($error_operation);
		$arguments_as_string = implode(', ', $arguments);
		//watchdog('importusers', "Error when calling operation '%s'('%s')",
		//array($operation, $arguments_as_string));
		drupal_set_message(t('An error occurred and has been recorded
		in the system log.'), 'error');
	}
}

