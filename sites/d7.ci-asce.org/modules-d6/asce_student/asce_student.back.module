<?php
// $Id$

/*
 * Implementation of hook_menu().
 * 
 * The array of items are as follows:
 * 
 * "title": Required. The untranslated title of the menu item.
 * "title callback": Function to generate the title, defaults to t(). If you require only the raw string to be output, set this to FALSE.
 * "title arguments": Arguments to send to t() or your custom callback.
 * "description": The untranslated description of the menu item.
 * "page callback": The function to call to display a web page when the user visits the path. If omitted, the parent menu item's callback will be used instead.
 * "page arguments": An array of arguments to pass to the page callback function. Integer values pass the corresponding URL component (see arg()).
 * "access callback": A function returning a boolean value that determines whether the user has access rights to this menu item. Defaults to user_access() unless a value is inherited from a parent menu item..
 * "access arguments": An array of arguments to pass to the access callback function. Integer values pass the corresponding URL component.
 * "file": A file that will be included before the callbacks are accessed; this allows callback functions to be in separate files. The file should be relative to the implementing module's directory unless otherwise specified by the "file path" option.
 * "file path": The path to the folder containing the file specified in "file". This defaults to the path to the module implementing the hook.
 * "weight": An integer that determines relative position of items in the menu; higher-weighted items sink. Defaults to 0. When in doubt, leave this alone; the default alphabetical order is usually best.
 * "menu_name": Optional. Set this to a custom menu if you don't want your item to be placed in Navigation.
 * "type": A bitmask of flags describing properties of the menu item. Many shortcut bitmasks are provided as constants in menu.inc:
 *          MENU_NORMAL_ITEM: Normal menu items show up in the menu tree and can be moved/hidden by the administrator.
 *          MENU_CALLBACK: Callbacks simply register a path so that the correct function is fired when the URL is accessed.
 *          MENU_SUGGESTED_ITEM: Modules may "suggest" menu items that the administrator may enable.
 *          MENU_LOCAL_TASK: Local tasks are rendered as tabs by default.
 *          MENU_DEFAULT_LOCAL_TASK: Every set of local tasks should provide one "default" task, that links to the same path as its parent when clicked.
 * If the "type" key is omitted, MENU_NORMAL_ITEM is assumed.
 */
       
function asce_student_menu() {
	global $user;
	
	$items['student-days'] = array(
	  'title' => t('Student Days'),
	  'description' => t('Student Days Main Page'),
	  'page callback' => 'asce_student_main',
    'access callback' => TRUE,
	  'menu_name' => 'Student Days',
	  'type' => MENU_CALLBACK,
	  'file' => 'asce_student.pages.inc',
	);
	$items['student-days/main'] = array(
    'title' => 'Main',
	  'access callback' => 'asce_student_not_anonymous',
    'type' => MENU_CALLBACK,
    'weight' => -5,
  );
  $items['student-days/apply'] = array(
    'title' => t('Student Days Profile'),
    'description' => t('Student Days Profile'),
    'page callback' => 'asce_student_application',
    'access callback' => 'asce_student_access_apply',
	  'access arguments' => array('create', 'ci_student_days_seattle'),
    'menu_name' => 'Student Days',
	  'type' => MENU_CALLBACK,
	  'file' => 'asce_student.pages.inc',
	  'weight' => 1,
  );
  $items['student-days/application'] = array(
    'title' => t('View'),
    'description' => t('Application'),
    'page callback' => 'asce_student_application',
    'access callback' => 'asce_student_access_apply',
    'access arguments' => array('create', 'ci_student_days_seattle'),
    'menu_name' => 'Student Days',
    'type' => MENU_CALLBACK,
    'file' => 'asce_student.pages.inc',
    'weight' => 0,
  );
  $items['student-days/application/view'] = array(
    'title' => t('View'),
    'description' => t('Application'),
    'page callback' => 'asce_student_application',
    'access callback' => 'asce_student_access_apply',
    'access arguments' => array('create', 'ci_student_days_seattle'),
    'menu_name' => 'Student Days',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'file' => 'asce_student.pages.inc',
    'weight' => 0,
  );
  $items['student-days/application/edit'] = array(
    'title' => t('Edit'),
    'description' => t('Application'),
    'page callback' => 'asce_student_application',
    'page arguments' => array(TRUE),
    'access callback' => 'asce_student_access_apply',
    'access arguments' => array('create', 'ci_student_days_seattle'),
    'menu_name' => 'Student Days',
    'type' => MENU_LOCAL_TASK,
    'file' => 'asce_student.pages.inc',
    'weight' => 1,
  );
  $items['student-days/register'] = array(
    'title' => t('Create new account'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('user_register'),
    'access callback' => 'user_register_access',
    'type' => MENU_LOCAL_TASK,
    'file' => 'user.pages.inc',
    'file path' => drupal_get_path('module', 'user'),
    'weight' => 0,
  );
  $items['student-days/login'] = array(
    'title' => t('Login'),
    'description' => t('Login'),
    'page callback' => 'asce_student_main',
    'access callback' => 'user_is_anonymous',
    'menu_name' => 'Student Days',
    'file' => 'asce_student.pages.inc',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => 1,
  );
  $items['student-days/password'] = array(
    'title' => 'Request new password',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('user_pass'),
    'access callback' => 'user_is_anonymous',
    'type' => MENU_LOCAL_TASK,
    'file' => 'user.pages.inc',
    'file path' => drupal_get_path('module', 'user'),
    'weight' => 2,
  );
  $items['student-days/reset/%/%/%'] = array(
    'title' => 'Reset password',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('asce_student_pass_reset', 2, 3, 4),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
    'file' => 'asce_student.pages.inc',
  );
  $items['student-days/pass/%user/reset'] = array(
    'title' => 'Reset password',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('asce_student_pass_reset_form', 2),
    'access callback' => 'user_edit_access',
    'access arguments' => array(2),
    'type' => MENU_CALLBACK,
    'file' => 'asce_student.pages.inc',
  );
  $items['student-days/staff'] = array(
    'title' => t('Staff'),
    'description' => t('Staff Page'),
    'page callback' => 'asce_student_staff',
    'access arguments' => array('administer student days'),
    'menu_name' => 'Student Days',
    'type' => MENU_CALLBACK,
    'file' => 'asce_student.pages.inc',
    'weight' => 10,
  );
  
  // Mail Manager menu items
  $items['student-days/staff/mail/settings'] = array(
    'title' => 'Student Mail Templates',
    'description' => 'Configure automated student mail templates.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('asce_student_mail_settings'),
    'access arguments' => array('administer users'),
    'file' => 'asce_student.pages.inc',
  );
  $items['student-days/staff/mail/settings/edit/%'] = array(
    'title' => 'Student Mail Templates',
    'description' => 'Configure automated student mail templates.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('asce_student_mail_settings', 5),
    'access arguments' => array('administer users'),
    'file' => 'asce_student.pages.inc',
  );  
  $items['student-days/staff/mail'] = array(
    'title' => t('Administer Mail to Students'),
    'description' => t('Send and manage mail to students.'),
    'page callback' => 'asce_student_mail',
    'access arguments' => array('administer student days'),
    'file' => 'asce_student.mail.inc',
    'menu_name' => 'Student Days',
    'type' => MENU_CALLBACK,
    'weight' => 10,
  );
  $items['student-days/staff/mail/create'] = array(
    'title' => t('Create an eMail to Students'),
    'description' => t('Create an eMail to Students.'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('asce_student_mail_create_form'),
    'access arguments' => array('administer student days'),
    'menu_name' => 'Student Days',
    'file' => 'asce_student.mail.inc',
    'type' => MENU_CALLBACK,
    'weight' => 10,
  );
  $items['student-days/staff/mail/edit/%'] = array(
    'title' => t('Create an eMail to Students'),
    'description' => t('Create an eMail to Students.'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('asce_student_mail_create_form', 4),
    'access arguments' => array('administer student days'),
    'menu_name' => 'Student Days',
    'file' => 'asce_student.mail.inc',
    'type' => MENU_CALLBACK,
    'weight' => 10,
  );
  $items['student-days/staff/mail/send/reminder/%'] = array(
    'title' => t('Send a reminder eMail to Students'),
    'description' => t('Send a reminder eMail to Students.'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('asce_student_mail_send_reminder', 5),
    'access arguments' => array('administer student days'),
    'menu_name' => 'Student Days',
    'file' => 'asce_student.pages.inc',
    'type' => MENU_CALLBACK,
    'weight' => 10,
  );
  $items['student-days/staff/mail/send/confirm/%'] = array(
    'title' => t('Send an eMail to ALL Students'),
    'description' => t('Send an eMail to Students.'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('asce_student_mail_send_confirm'),
    'access arguments' => array('administer student days', 5),
    'menu_name' => 'Student Days',
    'file' => 'asce_student.mail.inc',
    'type' => MENU_CALLBACK,
    'weight' => 10,
  );
  $items['student-days/staff/dashboard'] = array(
    'title' => t('Student Days Dashboard for Administrators'),
    'description' => t('Student Days Dashboard for Administrators.'),
    'page callback' => 'asce_student_dashboard',
    'access arguments' => array('administer student days'),
    'menu_name' => 'Student Days',
    'file' => 'asce_student.pages.inc',
    'type' => MENU_CALLBACK,
    'weight' => 10,
  );
  $items['student-days/add-content'] = array(
    'title' => t('Add Content to this Page'),
    'description' => t('Staff Page:  Add content to this page'),
    'page callback' => 'asce_student_add_content',
    'access callback' => 'asce_student_tab_access',
    'access arguments' => array('create', 'ci_content'),
    //'access arguments' => array('administer student days'),
    'menu_name' => 'Student Days',
    'type' => MENU_CALLBACK,
    'file' => 'asce_student.pages.inc',
    'weight' => 11,
  );
  
  /*$items['student-days/check-mess-settings'] = array(
    'title' => t('A page to check the settings of students for messaging'),
    'description' => t('A page to check the settings of students for messaging'),
    'page callback' => 'asce_student_check_mess_settings',
    'access arguments' => array('administer student days'),
    'menu_name' => 'Student Days',
    'type' => MENU_CALLBACK,
    'file' => 'asce_student.pages.inc',
    'weight' => 11,
  );*/
    
  return $items;
}

function asce_student_init() {
  drupal_add_css(drupal_get_path('module', 'asce_student'). '/theme/asce_student.css');
}

/**
 * Implementation of hook_views_api().
 */
function asce_student_views_api() {
  return array(
    'api' => 2,
  );
}

function asce_student_nodeapi(&$node, $op, $teaser = NULL, $page = NULL) {
	if ($node->type == 'ci_student_days_seattle' && !drupal_is_front_page()) {
		if (arg(0) == 'student-days' && !arg(1)) {
			drupal_set_title(t(''));
		}
		if ((arg(0) == 'student-days' && arg(1)) || arg(0) == 'node') {
		  $bc[] = l(t('Home'), "");
		  $bc[] = l(t('Student Days'), "student-days");
		  drupal_set_breadcrumb($bc);
		}
	}
	if ($node->type == 'ci_student_team') {
		$bc[] = l(t('Home'), "");
    $bc[] = l(t('Student Days'), "student-days");
    drupal_set_breadcrumb($bc);
	}
}

function asce_student_block($op = 'list', $delta = 0, $edit = array()) {
  
  if ($op == 'list') {
    // returns array, with the following key-value pairs:
    //
    // 'info': (required) The human-readable name of the block. This is used to identify the block on administration screens, and is not displayed to non-administrative users.
    // 'cache': A bitmask of flags describing how the block should behave with respect to block caching. The following shortcut bitmasks are provided as constants in block.module:
    //    BLOCK_CACHE_PER_ROLE (default): The block can change depending on the roles the user viewing the page belongs to.
    //    BLOCK_CACHE_PER_USER: The block can change depending on the user viewing the page. This setting can be resource-consuming for sites with large number of users, and should only be used when BLOCK_CACHE_PER_ROLE is not sufficient.
    //    BLOCK_CACHE_PER_PAGE: The block can change depending on the page being viewed.
    //    BLOCK_CACHE_GLOBAL: The block is the same for every user on every page where it is visible.
    //    BLOCK_NO_CACHE: The block should not get cached.
    // 'weight': (optional) Initial value for the ordering weight of this block. Most modules do not provide an initial value, and any value provided can be modified by a user on the block configuration screen.
    // 'status': (optional) Initial value for block enabled status. (1 = enabled, 0 = disabled). Most modules do not provide an initial value, and any value provided can be modified by a user on the block configuration screen.
    // 'region': (optional) Initial value for theme region within which this block is set. Most modules do not provide an initial value, and any value provided can be modified by a user on the block configuration screen. Note: If you set a region that isn't available in the currently enabled theme, the block will be disabled.
    // 'visibility': (optional) Initial value for the visibility flag, which tells how to interpret the 'pages' value. Possible values are:
    //    0: Show on all pages except listed pages. 'pages' lists the paths where the block should not be shown.
    //    1: Show only on listed pages. 'pages' lists the paths where the block should be shown.
    //    2: Use custom PHP code to determine visibility. 'pages' gives the PHP code to use.
    //  Most modules do not provide an initial value for 'visibility' or 'pages', and any value provided can be modified by a user on the block configuration screen.
    // 'pages': (optional) See 'visibility' above.

    $blocks[0]['info'] = t('Student Days - Application');
    $blocks[0]['cache'] = BLOCK_NO_CACHE;
    
    $blocks[1]['info'] = t('Student Days - Things you can do');
    $blocks[1]['cache'] = BLOCK_NO_CACHE;
    
    $blocks[2]['info'] = t('Student Days - Administration');
    $blocks[2]['cache'] = BLOCK_NO_CACHE;
    
    $blocks[3]['info'] = t('Student Days - Team Status');
    $blocks[3]['cache'] = BLOCK_NO_CACHE;

    $blocks[4]['info'] = t('Student Days - Messages');
    $blocks[4]['cache'] = BLOCK_NO_CACHE;
    
    $blocks[5]['info'] = t('Student Days - Team Links');
    $blocks[5]['cache'] = BLOCK_NO_CACHE;
    
    $blocks[6]['info'] = t('Student Days - Team Roster');
    $blocks[6]['cache'] = BLOCK_NO_CACHE;
    
    $blocks[7]['info'] = t('Student Days - Team Captain Admin');
    $blocks[7]['cache'] = BLOCK_NO_CACHE;
    
    $blocks[8]['info'] = t('Student Days - Front');
    $blocks[8]['cache'] = BLOCK_NO_CACHE;
    
    return $blocks;
  }

  if ($op == 'view') {
  	module_load_include('inc', 'asce_student', 'asce_student.blocks');
  	switch ($delta) {
  		case 0:
        $block = asce_student_block_application();
        break;
  		case 1:
  	  	$block = asce_student_block_things_you_can_do();
        break;
  		case 2:
  		  $block = asce_student_block_administration();
  		  break;
  		case 3:
  			$block = asce_student_block_team_status();
        break;
  		case 4:
  			$block = asce_student_block_messages();
  			break;
      case 5:
        $block = asce_student_block_team_links();
        break;
      case 6:
        $block = asce_student_block_team_roster();
        break;
      case 7:
        $block = asce_student_block_team_captain_admin();
        break;
      case 8:
        $block = asce_student_block_front();
        break;
  	}
  	return $block;
  }

  if ($op == 'configure') {
    $form = array();
    if ($delta == 0) {
    	$form['field1']['authenticated'] = array(
   	    '#type' => 'textarea',
   	    '#title' => t('Content to display when user is logged in'),
   	    '#default_value' => t('User is not logged in display something.'),
   	  );
   	  $form['field1']['format'] = filter_form(2, 1, array('field1'));
    	
   	  $form['field2']['anonymous'] = array(
        '#type' => 'textarea',
        '#title' => t('Content to display when user is <em><b>not</b></em> logged in.'),
        '#default_value' => t('User is logged in display something.'),
      );
      $form['field2']['format'] = filter_form(2, 1, array('field2'));
      
      $form['field3']['auth_started'] = array(
        '#type' => 'textarea',
        '#title' => t('Content to display when user has finished application.'),
        '#default_value' => t('User has finished application.'),
      );
      $form['field3']['format'] = filter_form(2, 1, array('field3'));
    }
    return $form;
  }
  
  if ($op == 'save') {
    if ($delta == 0) {
    	$message .= '<p>Welcome!</p><p>You are here because you have been nominated by your faculty advisor as a leader ';
	    $message .= 'in your university program, to apply to attend the CI Student Days in Seattle.  The first ';
	    $message .= 'step is to create a new account on this website by clicking that option below and filling ';
	    $message .= 'in the requested information.  Once that is done, you will see a link to begin your Student ';
	    $message .= 'Days online application.  You will be asked to upload a resume and provide a list of courses ';
	    $message .= 'you have taken in your program - you may want to have that information available before ';
	    $message .= 'you get started.  You can fill out the application in stages - just remember to hit the save ';
	    $message .= 'button at the bottom of the page when you stop - then you can return and complete the ';
	    $message .= 'application at another time without starting over.</p>';
	    
	    $message .= '<p>We are looking forward to getting to know you.  If you have questions or have any ';
	    $message .= 'difficulties please contact Erin Santiago at (703) 295-6076 or esantiago@asce.org.</p>';
	    
	    $message .= '<p>The application will be open until April 18th.  At that time the acceptance ';
	    $message .= 'committee will review all applications and select the 35 ';
	    $message .= check_plain('students who will be sponsored to attend this year\'s Student Days.');
	    $message .= '</p>';
    	variable_set('asce_student_days_block_authenticated', $edit['student_days_block']['authenticated'] ? $edit['student_days_block']['authenticated'] : $message);
    	variable_set('asce_student_days_block_anonymous', $edit['student_days_block']['anonymous']);
    	variable_set('asce_student_days_block_auth_started', $edit['student_days_block']['auth_started']);
    }
  }
}

function asce_student_tab_access($op, $type) {
	if (user_access('administer student days')) {
    if (node_access($op, $type)) {
      if (arg(1) != 'staff' ) {
        return TRUE;
      }
    }
  }
}

function asce_student_not_anonymous() {
	return !user_is_anonymous() ? TRUE : FALSE;
}

function asce_student_access_apply($op, $node, $account = NULL) {
	$return = node_access($op, $node, $account);
	if ($return) {
		$return = user_is_anonymous() ? FALSE : TRUE;
	}
	return $return;
}

function asce_student_perm() {
	$perms = array(
	  'administer student days',
	  'view student days content',
	  'post team application',
	  'receive student messages',
	);
	return $perms;
}

function asce_student_form_alter(&$form, &$form_state, $form_id) {
	// Begin form overrides for the student days application
	if ($form_id == 'ci_student_days_seattle_node_form') {
    // We only want to redirect if it is in the student-days part of the site
    global $user;
		if (arg(0) == 'student-days') {
      $form['buttons']['submit']['#submit'][] = 'asce_student_node_form_submit';
    }
    //dsm($form);
		drupal_set_title(t('CI Student Days Application'));
		if (!user_access('administer student days')) {
		  $form['notifications']['#access'] = FALSE;
		  $form['title']['#default_value'] = 'Application for ' . $user->profile_first_name . ' ' . $user->profile_last_name;
		  $form['title']['#access'] = FALSE;
		  $form['revision_information']['#access'] = FALSE;
		}
	}
  // End form overrides for the student days application	
	
	// Begin form overrides for user registration
	if ($form_id == 'user_login' && arg(0) == 'student-days') {
    $message .= '<p>Welcome!</p><p>You are here because you have been nominated by your faculty advisor as a leader ';
    $message .= 'in your university program, to apply to attend the CI Student Days in Seattle.  The first ';
    $message .= 'step is to create a new account on this website by clicking that option below and filling ';
    $message .= 'in the requested information.  Once that is done, you will see a link to begin your Student ';
    $message .= 'Days online application.  You will be asked to upload a resume and provide a list of courses ';
    $message .= 'you have taken in your program - you may want to have that information available before ';
    $message .= 'you get started.  You can fill out the application in stages - just remember to hit the save ';
    $message .= 'button at the bottom of the page when you stop - then you can return and complete the ';
    $message .= 'application at another time without starting over.</p>';
    
    $message .= '<p>We are looking forward to getting to know you.  If you have questions or have any ';
    $message .= 'difficulties please contact Erin Santiago at (703) 295-6076 or esantiago@asce.org.</p>';
    
    $message .= '<p>The application will be open until April 18th.  At that time the acceptance ';
    $message .= 'committee will review all applications and select the 35 ';
    $message .= check_plain('students who will be sponsored to attend this year\'s Student Days.');
    $message .= '</p>';
    
		/*$form['welcome'] = array(
		  '#weight' => -15,
		  '#value' => $message,
		);*/
		$form['#submit'][] = 'asce_student_login_submit';
	}
	if ($form_id == 'user_register' && arg(0) == 'student-days') {
		// Override the user settings for account creation
		if ($form['account']['pass']['#description'] == t('To change the current user password, enter the new password in both fields.')) {
			// Do nothing
		}
		else {
			$form['account']['pass'] = array(
      '#type' => 'password_confirm',
      '#description' => t('Provide a password for the new account in both fields.'),
      '#required' => TRUE,
      '#size' => 25,
			);
		}
		$form['#submit'] = array();
		$form['#submit'][] = 'asce_student_register_submit';
	}
	// End form overrides for user registration
	if ($form_id == 'ci_content_node_form' && $_GET['student-announcement']) {
		$form['field_student_days_content']['#default_value'][0]['value']=1;
		$form['field_student_days_announcement']['#default_value'][0]['value']=1;
		// turn a lot of fields off to simplify the form
		if (!user_access('administer nodes')) {
		  $form['notifications']['#access'] = FALSE;
		}
		$items = array('menu', '');
	}
}

function asce_student_theme() {
  $return = array(
    'asce_student_staff_menu' => array(
      'arguments' => array('content' => NULL),
      'file' => 'asce_student.pages.inc',
    ),
    'asce_student_block_style' => array(
      'arguments' => array('content' => NULL, 'width' => '33%', 'float' => FALSE),
      'file' => 'asce_student.pages.inc',
    ),
    'asce_panels_pane' => array(
      'arguments' => array('output' => array(), 'pane' => array(), 'display' => array()),
      'path' => drupal_get_path('module', 'asce_panels'),
      'template' => 'asce-panels-pane',
    ),
  );
  return $return;
}

function asce_student_login_submit($form, &$form_state) {
  global $user;
  if ($user->uid) {
    $form_state['redirect'] = 'student-days';
    return;
  }
}

function asce_student_register_submit($form, &$form_state) {
	asce_student_logintoboggan_user_register_submit($form, &$form_state);
	$form_state['redirect'] = 'student-days';
}

/**
 * Custom submit function for student registration from student days page
 *
 * @ingroup logintoboggan_form
 */
function asce_student_logintoboggan_user_register_submit($form, &$form_state) {

  $reg_pass_set = TRUE;

  // Test here for a valid pre-auth -- if the pre-auth is set to the auth user, we
  // handle things a bit differently.
  $pre_auth = logintoboggan_validating_id() != DRUPAL_AUTHENTICATED_RID;

  // If we are allowing user selected passwords then skip the auto-generate function
  // The new user's status should default to the site settings, unless reg_passwd_set == 1
  // (immediate login, we are going to assign a pre-auth role), and we want to allow
  // admin approval accounts access to the site.
  if ($reg_pass_set) {
    $pass = $form_state['values']['pass'];
    $status = 1;
  }
  else {
    $pass = user_password();
    $status = variable_get('user_register', 1) == 1;
  }

  // Must unset mail confirmation to prevent it from being saved in the user table's 'data' field.
  if (isset($form_state['values']['conf_mail'])) { unset($form_state['values']['conf_mail']); }

  if (array_intersect(array_keys($form_state['values']), array('uid', 'roles', 'init', 'session', 'status'))) {
    watchdog('security', 'Detected malicious attempt to alter protected user fields.', array(), WATCHDOG_WARNING);
    $form_state['redirect'] = 'student-days/register';
    return;
  }

  // The unset below is needed to prevent these form values from being saved as user data.
  unset($form_state['values']['form_token'], $form_state['values']['submit'], $form_state['values']['op'], $form_state['values']['notify'], $form_state['values']['form_id'], $form_state['values']['form_build_id'], $form_state['values']['affiliates'], $form_state['values']['destination']);

  // Set the roles for the new user -- add the pre-auth role if they can pick their own password,
  // and the pre-auth role isn't anon or auth user.
  $validating_id = logintoboggan_validating_id();
  $form_state['values']['roles'] = array(2 => 'authenticated user', 10 => 'Student');
  $roles = isset($form_state['values']['roles']) ? array_filter($form_state['values']['roles']) : array();
  if ($reg_pass_set && ($validating_id > DRUPAL_AUTHENTICATED_RID)) {
    $roles[$validating_id] = 1;
  }

  $edit = array_merge($form_state['values'], array('pass' => $pass, 'init' => $form_state['values']['mail'], 'roles' => $roles, 'status' => $status));
  $account = user_save('', $edit);
  // Add plain text password into user account to generate mail tokens.
  $account->password = $pass;
  $form_state['user'] = $account;

  watchdog('user', 'New user: %name (%email).', array('%name' => $account->name, '%email' => $account->mail), WATCHDOG_NOTICE, l(t('edit'), 'user/'. $account->uid .'/edit'));

  $login_url = variable_get('user_register', 1) == 1 ? logintoboggan_eml_validate_url($account) : NULL;

  // Compose the appropriate user message--admin approvals don't require a validation email.
  if($reg_pass_set) {
    if ($pre_auth) {
      $message = t('A validation e-mail has been sent to your e-mail address. In order to gain full access to the site, you will need to follow the instructions in that message.');
    }
    else {
      $message = '';
    }
  } else {
    $message = t('Your password and further instructions have been sent to your e-mail address.');
  }

  // Create new user account, no administrator approval required.
  $mailkey = 'register_no_approval_required';

  // Mail the user.
  _logintoboggan_mail_notify($mailkey, $account, $login_url);

  drupal_set_message($message);

  // where do we need to redirect after registration?
  $redirect = 'student-days';
  $form_state['redirect'] = asce_student_logintoboggan_process_login($account, $edit, $redirect);
}

/**
 * Actually log the user on
 *
 * @param object $account
 *   The user object.
 * @param array $edit
 *   An array of form values if a form has been submitted.
 * @param array $redirect
 *   An array of key/value pairs describing a redirect location, in the form
 *   that drupal_goto() will understand. Defaults to:
 *     'path' => 'user/'. $user->uid
 *     'query' => NULL
 *     'fragment' => NULL
 */

function asce_student_logintoboggan_process_login($account, $edit, $redirect = array()){
  global $user;

  $user = user_load($account->uid);

  // Call core's function to finalize the login.
  user_authenticate_finalize($edit);

  if (isset($redirect['path']) && $redirect['path'] != '') {
    return $redirect;
  }
}

function asce_student_node_form_validate($form, &$form_state) {
	global $user;
  $form_state['values']['title'] = 'Application for ' . $user->profile_first_name . ' ' . $user->profile_last_name;
}

function asce_student_node_form_submit($form, &$form_state) {
	$form_state['redirect'] = 'student-days/application';
}

function asce_student_days_seattle_node_form_submit($form, &$form_state) {
  $form_state['redirect'] = 'student-days';
}

function _asce_student_process_application($app) {
	global $user;
	$status = $app['status'];
	$node = $app['data'];
  $output .= '<p><a href="student-days/application"><strong><span style="font-size: medium;">';
	$output .= 'View/Edit your Profile/Application</span></strong></a></p>';
	return $output;
}

/*function _asce_student_admin_block() {
	// Check the ci_student_days_seattle content type and analyze it
	$sql = "SELECT * FROM {content_group_fields} WHERE type_name = 'ci_student_days_seattle'";
	$results = db_query($sql);
	$output .= '<p>';
	while ($row = db_fetch_object($results)) {
		//$output .= $row->group_name . ' -> ' . $row->field_name . '<br/>';
	}
	$output .= '</p>';
	return $output;
}*/

function _asce_student_upload_picture_submit($form, &$form_state) {
	dsm($form_state);
	drupal_goto('node/6401');
}

function asce_student_upload_picture_form (&$form_state, $user) {	
	$edit['picture'] = $user->picture;
	$form['#attributes'] = array('enctype' => "multipart/form-data");
	$form['instructions'] = array(
	  '#value' => '<p>In order to start your profile, you must upload a photo of yourself.</p>',
	);
	//'upload' will be used in file_check_upload()
	if (variable_get('user_pictures', 0)) {
		$form['picture'] = array('#type' => 'fieldset', '#title' => t('Picture'), '#weight' => 1);
		$picture = theme('user_picture', (object)$edit);
		if ($edit['picture']) {
			$form['picture']['current_picture'] = array('#value' => $picture);
			//$form['picture']['picture_delete'] = array('#type' => 'checkbox', '#title' => t('Delete picture'), '#description' => t('Check this box to delete your current picture.'));
		}
		else {
			//$form['picture']['picture_delete'] = array('#type' => 'hidden');
		}
		$form['picture']['picture_upload'] = array('#type' => 'file', '#title' => t('Upload picture'), '#size' => 48, '#description' => t('Your virtual face or picture. Maximum dimensions are %dimensions and the maximum size is %size kB.', array('%dimensions' => variable_get('user_picture_dimensions', '85x85'), '%size' => variable_get('user_picture_file_size', '30'))) .' '. variable_get('user_picture_guidelines', ''));
		$form['picture']['submit'] = array(
		  '#type' => 'submit', 
		  '#value' => t('Upload'),
		);
		//$form['#validate'][] = 'user_validate_picture';
		//$form['#submit'][] = 'user_validate_picture';
	}
	$form['#user'] = $user;
	$form['#uid'] = $user->uid;
	return $form;
}

/*
 *   Taken from user module
 */
function asce_student_upload_picture_form_validate($form, &$form_state) {
  // If required, validate the uploaded picture.
  $validators = array(
    'file_validate_is_image' => array(),
    'file_validate_image_resolution' => array(variable_get('user_picture_dimensions', '85x85')),
    'file_validate_size' => array(variable_get('user_picture_file_size', '30') * 1024),
  );
  if ($file = file_save_upload('picture_upload', $validators)) {
    // Remove the old picture.
    if (isset($form_state['values']['_account']->picture) && file_exists($form_state['values']['_account']->picture)) {
      file_delete($form_state['values']['_account']->picture);
    }

    // The image was saved using file_save_upload() and was added to the
    // files table as a temporary file. We'll make a copy and let the garbage
    // collector delete the original upload.
    $info = image_get_info($file->filepath);
    $destination = variable_get('user_picture_path', 'pictures') .'/picture-'. $form['#uid'] .'.'. $info['extension'];
    if (file_copy($file, $destination, FILE_EXISTS_REPLACE)) {
      $form_state['values']['picture'] = $file->filepath;
    }
    else {
      form_set_error('picture_upload', t("Failed to upload the picture image; the %directory directory doesn't exist or is not writable.", array('%directory' => variable_get('user_picture_path', 'pictures'))));
    }
  }
}

function asce_student_upload_picture_form_submit($form, &$form_state) {
  //drupal_set_message($_FILES['files']['name']['picture_upload']);
  $account = $form['#user'];
  user_save($account, array('picture'=>$form_state['values']['picture']));
  drupal_goto('node/6401');
}

function asce_student_validate_picture($form, &$form_state) {
  drupal_set_message('validate' . kpr($form_state, TRUE));
  $file = file_save_upload('upload');
  dsm($file);
  return;
	// If required, validate the uploaded picture.
  $validators = array(
    'file_validate_is_image' => array(),
    'file_validate_image_resolution' => array(variable_get('user_picture_dimensions', '85x85')),
    'file_validate_size' => array(variable_get('user_picture_file_size', '30') * 1024),
  );
  if ($file = file_save_upload('picture_upload', $validators)) {
    // Remove the old picture.
    if (isset($form_state['values']['_account']->picture) && file_exists($form_state['values']['_account']->picture)) {
      file_delete($form_state['values']['_account']->picture);
    }

    // The image was saved using file_save_upload() and was added to the
    // files table as a temporary file. We'll make a copy and let the garbage
    // collector delete the original upload.
    $info = image_get_info($file->filepath);
    $destination = variable_get('user_picture_path', 'pictures') .'/picture-'. $form['#uid'] .'.'. $info['extension'];
    if (file_copy($file, $destination, FILE_EXISTS_REPLACE)) {
      $form_state['values']['picture'] = $file->filepath;
    }
    else {
      form_set_error('picture_upload', t("Failed to upload the picture image; the %directory directory doesn't exist or is not writable.", array('%directory' => variable_get('user_picture_path', 'pictures'))));
    }
  }
}

/*
 *  Return the status of a student application
 */
function asce_student_application_status($user) {
	$app['status'] = 'NOT STARTED';
	$sql = "SELECT * FROM {node} WHERE type = 'ci_student_days_seattle' AND uid = %d";
  $results = db_query($sql, $user->uid);
  if($application = db_fetch_object($results)) {
  	$app['status'] = 'STARTED';
  	$app['data'] = node_load($application->nid);
  };
  return $app;
}

function _asce_student_drupal_get_just_form_array($form_id) {
	module_load_include('inc', 'node', 'node.pages');
	$node = array('uid' => $user->uid, 'name' => (isset($user->name) ? $user->name : ''), 'type' => $type, 'language' => '');
  $form_state = array('storage' => NULL, 'submitted' => FALSE);

  $args = func_get_args();
  $args[] = $node; 
  $cacheable = FALSE;

  if (isset($_SESSION['batch_form_state'])) {
    // We've been redirected here after a batch processing : the form has
    // already been processed, so we grab the post-process $form_state value
    // and move on to form display. See _batch_finished() function.
    $form_state = $_SESSION['batch_form_state'];
    unset($_SESSION['batch_form_state']);
  }
  else {
    // If the incoming $_POST contains a form_build_id, we'll check the
    // cache for a copy of the form in question. If it's there, we don't
    // have to rebuild the form to proceed. In addition, if there is stored
    // form_state data from a previous step, we'll retrieve it so it can
    // be passed on to the form processing code.
    if (isset($_POST['form_id']) && $_POST['form_id'] == $form_id && !empty($_POST['form_build_id'])) {
      $form = form_get_cache($_POST['form_build_id'], $form_state);
    }

    // If the previous bit of code didn't result in a populated $form
    // object, we're hitting the form for the first time and we need
    // to build it from scratch.
    if (!isset($form)) {
      $form_state['post'] = $_POST;
      // Use a copy of the function's arguments for manipulation
      $args_temp = $args;
      $args_temp[0] = &$form_state;
      array_unshift($args_temp, $form_id);

      $form = call_user_func_array('drupal_retrieve_form', $args_temp);
      $form_build_id = 'form-'. md5(uniqid(mt_rand(), TRUE));
      $form['#build_id'] = $form_build_id;
      drupal_prepare_form($form_id, $form, $form_state);
      // Store a copy of the unprocessed form for caching and indicate that it
      // is cacheable if #cache will be set.
      $original_form = $form;
      $cacheable = TRUE;
      unset($form_state['post']);
    }
    $form['#post'] = $_POST;
  }
  return $form;  
}

function _asce_student_breadcrumb($links = array()) {
	$breadcrumb = drupal_get_breadcrumb();
	$breadcrumb[] = l('Student Days', 'student-days');
	if ($links) {
	  $breadcrumb = array_merge($breadcrumb, $links);
	}
	//dsm($links);
	//dsm($breadcrumb);
	drupal_set_breadcrumb($breadcrumb);
}

function asce_student_messages($student = FALSE) {
	global $user;
	if ($student) {
	  _asce_student_breadcrumb();
	}
	module_load_include('inc', 'privatemsg', 'privatemsg.pages');
	return drupal_get_form('privatemsg_list', 'inbox', $user);
}

/**
 * Checks access to a menu entry.
 *
 * Contains special checks if the privatemsg menu entries are displayed as a
 * local task in the profile.
 *
 * @param $permission
 *   Permission string, defaults to read privatemsg
 *
 * @param $account
 *   User account to check permissions. If NULL, default to current user.
 *
 * @param $deny_if_other
 *   Deny access if user is viewing another user's messages and does not have
 *   proper permissions.
 *
 * @return
 *   TRUE if user has access, FALSE if not.
 */
function asce_student_privatemsg_menu_access() {
  $access = privatemsg_menu_access();
  if ($access) {
  	if (arg(0) != 'student-days') {
  		return TRUE;
  	}
  }  
}

function asce_student_privatemsg_menu_access_student() {
  $access = privatemsg_menu_access();
  if ($access) {
    if (arg(0) == 'student-days') {
      return TRUE;
    }
  }  
}

/**
 * Clean up the panel pane variables for the template.
 */
function template_preprocess_asce_panels_pane($vars) {
  $content = $vars['output'];
  // basic classes
  $vars['classes'] = 'asce-panel-pane';
  $vars['id'] = '';

  // Add some usable classes based on type/subtype
  ctools_include('cleanstring');
  $type_class = $content->type ? 'pane-'. ctools_cleanstring($content->type, array('lower case' => TRUE)) : '';
  $subtype_class = $content->subtype ? 'pane-'. ctools_cleanstring($content->subtype, array('lower case' => TRUE)) : '';

  // Sometimes type and subtype are the same. Avoid redudant classes.
  if ($type_class != $subtype_class) {
    $vars['classes'] .= " $type_class $subtype_class";
  }
  else {
    $vars['classes'] .= " $type_class";
  }

  // Add id and custom class if sent in.
  if (!empty($content->content)) {
    if (!empty($content->css_id)) {
      $vars['id'] = ' id="' . $content->css_id . '"';
    }
    if (!empty($content->css_class)) {
      $vars['classes'] .= ' ' . $content->css_class;
    }
  }

  // administrative links, only if there is permission.
  $vars['admin_links'] = '';
  if (user_access('view pane admin links') && !empty($content->admin_links)) {
    $vars['admin_links'] = theme('links', $content->admin_links);
  }

  $vars['title'] = !empty($content->title) ? $content->title : '';

  $vars['feeds'] = !empty($content->feeds) ? implode(' ', $content->feeds) : '';
  $vars['content'] = !empty($content->content) ? $content->content : '';

  $vars['links'] = !empty($content->links) ? theme('links', $content->links) : '';
  $vars['more'] = '';
  if (!empty($content->more)) {
    if (empty($content->more['title'])) {
      $content->more['title'] = t('more');
    }
    $vars['more'] = l($content->more['title'], $content->more['href'], $content->more);
  }
}

/*
 * Implementation of hook_action_info()
 */ 
function asce_student_action_info() {
  $action_info = array(
    'asce_student_send_nominated_email_action' => array(
      'description' => t('Send "You have been nominated..." email to students'),
      'type' => 'user',
      'configurable' => TRUE,
      'hooks' => array(
        'user' => array('view'),
      ),
    ),
  );
  return $action_info;
}

/**
 * Implementation of a configurable Drupal action. Sends an email.
 */
function asce_student_send_nominated_email_action($object, $context) {
  // Since I've declared this action as a type user, the object is 
  // automatically the user account
  $recipient = array($object->uid => $object->mail);
  $message = array(
    'type' => 'asce-student-mail',
    'subject' => $context['subject'],
    'body' => $context['body'],
    'new_sender' => $context['sender'],
    'params' => array(
      'mail' => array (
        'from' => $context['sender'],
      ),
    ),
  );
  $result = messaging_message_send($recipient, $message, $send_method);
  drupal_set_message($result ? 'The email was successfully sent.' : 'There was a problem sending the email.' );
}

/**
 * Conditionally create and send a notification email when a certain
 * operation happens on the given user account.
 *
 * @see user_mail_tokens()
 * @see drupal_mail()
 *
 * @param $op
 *  The operation being performed on the account.  Possible values:
 *  'nominated': The first e-mail sent to a student regarding student days
 *  'solicit captains': Message seeking potential team captains
 *  'solicit officers': Message seeking potential team officers
 *  'solicit members': Message seeking potential team members
 *
 * @param $account
 *  The user object of the account being notified.  Must contain at
 *  least the fields 'uid', 'name', and 'mail'.
 * @param $language
 *  Optional language to use for the notification, overriding account language.
 * @return
 *  The return value from drupal_mail_send(), if ends up being called.
 */
function _asce_student_mail_notify($op, $account, $language = NULL) {
  // By default, we always notify except for deleted and blocked.
  $default_notify = ($op != 'status_deleted' && $op != 'status_blocked');
  $notify = variable_get('user_mail_'. $op .'_notify', $default_notify);
  if ($notify) {
    $params['account'] = $account;
    $language = $language ? $language : user_preferred_language($account);
    $mail = drupal_mail('asce_student', $op, $account->mail, $language, $params);
  }
  return empty($mail) ? NULL : $mail['result'];
}

/**
 * Implementation of hook_mail().
 */
function asce_student_mail($key, &$message, $params) {
  $language = $message['language'];
  $variables = user_mail_tokens($params['account'], $language);
  $variables = array_merge($variables, asce_student_mail_tokens($params['account'], $language));
  $message['subject'] .= _asce_student_mail_text($key .' subject', $language, $variables);
  $message['body'][] = _asce_student_mail_text($key .' body', $language, $variables);
}

/**
 * Return an array of token to value mappings for user e-mail messages.
 *
 * @param $account
 *  The user object of the account being notified.  Must contain at
 *  least the fields 'uid', 'name', and 'mail'.
 * @param $language
 *  Language object to generate the tokens with.
 * @return
 *  Array of mappings from token names to values (for use with strtr()).
 */
function asce_student_mail_tokens($account, $language) {
  global $base_url;
  $tokens = array(
    '!first_name' => $account->profile_first_name,
    '!last_name' => $account->profile_last_name,
    '!professor_last' => $account->profile_professor_last_name,
    '!professor_first' => $account->profile_professor_first_name,
    '!first_login' => asce_student_pass_reset_url($account),
    '!days_left' => _asce_student_get_days_left('2011-04-15'),
  );
  return $tokens;
}

function _asce_student_get_days_left($date) {
	$deadline = new DateTime($date);
	$now = date_make_date('now');
	$diff = date_difference($deadline, $now, 'days');
  return $diff > 1 ? $diff . ' days' : $diff . ' day';
}

/**
 * Returns a mail string for a variable name.
 *
 * Used by asce_student_mail() and the settings forms to retrieve strings.
 */
function _asce_student_mail_text($key, $language = NULL, $variables = array()) {
  $langcode = isset($language) ? $language->language : NULL;

  if ($admin_setting = variable_get('user_mail_'. $key, FALSE)) {
    // An admin setting overrides the default string.
    return strtr($admin_setting, $variables);
  }
  else {
    // No override, return default string.
    switch ($key) {
      case 'nominated subject':
        $text = db_result(db_query("SELECT subject FROM {asce_student_mail} WHERE mail_key = 'nominated'"));
      	return t($text, $variables, $langcode);
      case 'nominated body':
        $text = db_result(db_query("SELECT body FROM {asce_student_mail} WHERE mail_key = 'nominated'"));
        return t($text, $variables, $langcode);
      
      case 'solicit team captains subject':
        $text = db_result(db_query("SELECT subject FROM {asce_student_mail} WHERE mail_key = 'solicit team captains'"));
        return t($text, $variables, $langcode);
      case 'solicit team captains body':
        $text = db_result(db_query("SELECT body FROM {asce_student_mail} WHERE mail_key = 'solicit team captains'"));
        return t($text, $variables, $langcode);

      case 'solicit team officers subject':
        $text = db_result(db_query("SELECT subject FROM {asce_student_mail} WHERE mail_key = 'solicit team officers'"));
        return t($text, $variables, $langcode);
      case 'solicit team officers body':
        $text = db_result(db_query("SELECT body FROM {asce_student_mail} WHERE mail_key = 'solicit team officers'"));
        return t($text, $variables, $langcode);
      
      case 'solicit team members subject':
        $text = db_result(db_query("SELECT subject FROM {asce_student_mail} WHERE mail_key = 'solicit team members'"));
        return t($text, $variables, $langcode);
      case 'solicit team members body':
        $text = db_result(db_query("SELECT body FROM {asce_student_mail} WHERE mail_key = 'solicit team members'"));
        return t($text, $variables, $langcode);
    }
  }
}

/**
 * Generates a unique URL for a user to login and reset their password.
 *
 * @param object $account
 *   An object containing the user account.
 *
 * @return
 *   A unique URL that provides a one-time log in for the user, from which
 *   they can change their password.
 */
function asce_student_pass_reset_url($account) {
  $timestamp = time();
  return url("student-days/reset/$account->uid/$timestamp/". user_pass_rehash($account->pass, $timestamp, $account->login), array('absolute' => TRUE));
}

