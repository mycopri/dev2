<?php
/**
 * @file
 * Subscriptions to content events
 */

/**
 * Implementation of hook_permission()
 */
function og_mail_permission() {
  return array(
    'subscribe to content' =>  array(
      'title' => t('Subscribe to content'),
      'description' => t('Subscribe to content posted or updated.'),
    ),
    'subscribe to content type' =>  array(
      'title' => t('Subscribe to content type'),
      'description' => t('Subscribe to all content from a content type.'),
    ),
    'og_mail admin' =>  array(
      'title' => t('Admin/developer'),
      'description' => t('For use for testing and development only.'),
    ),
  );
}

/**
 * Implementation of hook_node_presave()
 */
function og_mail_node_presave($node) {
  if(!is_null($node->nid)) {
    $old_node = node_load($node->nid);
    $node->old_status = $old_node->status;
  }  
}

/**
 * Implementation of hook_node_update().
 */
function og_mail_node_update($node) {
  // Check a few things first:
  // 1) Is this node part of a group?
  // 2) Is the node a new post?
  if (!_node_in_group($node)) {
    return;
  }
  $new_node = _node_is_new($node);
  
  if ($node->status) {
    if ($node->old_status == 0) {
      $event_id = _og_mail_save_content_event($node, 'node', 'publish');
      _og_mail_save_mail_queue($node, $event_id);
    }
    elseif (!$new_node) {
      $event_id = _og_mail_save_content_event($node, 'node', 'update');
      _og_mail_save_mail_queue($node, $event_id);
    }
    _og_mail_send();
  }
}

/**
 * Implementation of hook_node_insert().
 */
function og_mail_node_insert($node) {
  // We only want to record group content events
  if (!_node_in_group($node)) {
      return;
  }
  
  if ($node->status) {
    $event_id = _og_mail_save_content_event($node, 'node', 'create');
    _og_mail_save_mail_queue($node, $event_id);
    _og_mail_send();
  }
}

/**
 * Implementation of hook_comment_insert().
 */
function og_mail_comment_insert($comment) {
  $node = node_load($comment->nid);
  // We only want to record group content events
  if (!_node_in_group($node)) {
      return;
  }

  if ($node->status) {
    $event_id = _og_mail_save_content_event($comment, 'comment', 'create');
    _og_mail_save_mail_queue($comment, $event_id);
    _og_mail_send();
  }
}

/**
 * Helper function to check and see if the node being updated
 * wasn't just recently created. We want to keep new posts
 * as new because sometimes the author will updated it right away.
 * 
 * @param type $node
 */
function _node_is_new($node) {
  $result = db_select('og_mail_events', 'events')
          -> fields('events', array('id', 'nid', 'event'))
          -> condition('nid', $node->nid, '=')
          -> condition('event', 'create', '=')
          ->execute()
          ->fetchAssoc();
  if($result) {
    return TRUE;
  }
}

function _node_in_group($node) {
  if (count($node->group_audience['und']) > 0) {
    return TRUE;
  }
}

/**
 * Save group content event to database
 * 
 * @param type $node
 * @param type $event
 * @return the primary key or id of the event
 */
function _og_mail_save_content_event($object, $type, $event) {
  // Check to see if this node is already in the table
  $query = db_select('og_mail_events', 'events')
          -> fields('events', array('id', 'nid', 'event'))
          -> condition('nid', $object->nid, '=')
          -> condition('type', $type, '=');
  if($type == 'comment') {
    $query->condition('cid', $object->cid, '=');
  }
  
  $event_row = $query->execute()-> fetchAssoc();
  
  if (isset($event_row['id'])) {
    db_update('og_mail_events')
          ->fields(array(
            'created' => REQUEST_TIME,
          ))
          -> condition('nid', $object->nid, '=')
          -> condition('type', $type, '=')
          -> execute();
    $event_id = $event_row['id'];
  }
  else {
    $event_id = db_insert('og_mail_events')
          ->fields(array(
          'nid' => $object->nid,
          'cid' => isset($object->cid) ? $object->cid : NULL,
          'type' => $type,
          'event' => $event,
          'created' => REQUEST_TIME,
          ))
        ->execute();
  }
  return $event_id;
}

/**
 * 
 * @param type $node
 * @param type $event_id
 * @return type
 */
function _og_mail_save_mail_queue($object, $event_id) {
  if (isset($object->cid)) {
    $node = node_load($object->nid);
  }
  $users = _get_user_list($node);
  
  // Create an entry for every user in the og_mail
  // table
  foreach ($users as $uid => $mail) {
    // Check to see if this activity is already queued
    $queue_row = db_select('og_mail', 'mail')
          -> fields('mail', array('event_id', 'uid'))
          -> condition('event_id', $event_id, '=')
          -> condition('uid', $uid, '=')
          ->execute()
          ->fetchAssoc();
    if (!$queue_row) {
      db_insert('og_mail')
          ->fields(array(
          'event_id' => $event_id,
          'uid' => $uid,
          'sent' => 0,
          ))
        ->execute();
    }
  }
}

/**
 * Query the og_membership to get a list of users who belong
 * to the group/s that the node belongs to
 * 
 * @param type $node
 * @return an array of users
 */
function _get_user_list($node) {
  foreach($node->group_audience['und'] as $group) {
    $groups[$group['gid']]['state'] = $group['state'];
    $groups[$group['gid']]['created'] = $group['created'];
  }
  foreach ($groups as $gid => $group) {
    $result = db_select('og_membership', 'og')
            ->fields('og', array('etid'))
            ->condition('gid', $gid, '=')
            ->condition('entity_type', 'user', '=')
            ->execute();
    $users = array();
    foreach($result as $row) {
      $account = user_load($row->etid);
      if(!is_null($row->etid)) {
        $users[$account->uid] = $account->mail;
      }
    }
  }
  return $users;
}

function _og_mail_send() {
  // We will need to do this step by step, instead of sending an email
  // I'll concentrate first on just displaying a message and the flow
  // First step will be to check and see when was the last time an mail
  // was sent to the specific user.
  global $user;
  
  if (!user_access('og_mail admin')) {
    return;
  }
  
  $account = $user;
  $params['account'] = $account;  
  $params = array_merge($params, og_mail_prepare_message($account));
  $query = db_select('og_mail', 'mail')
          ->fields('mail', array('uid'))
          ->distinct()
          ->execute();
  $uids = $query->fetchAll();
  dsm($uids);
  foreach($uids as $uid) {
    $account = user_load($uid->uid);
    $params['recipient'] = $account;
    drupal_mail('og_mail', 'og_mail', $account->mail, user_preferred_language($account), $params);
  }
}

function og_mail_prepare_message($account) {
  global $base_url;
  // Get the list of notifications for the user
  $query = db_select('og_mail', 'mail')
          -> fields('mail', array('event_id', 'id'))
          -> condition('uid', $account->uid, '=');
  $query->join('og_mail_events', 'events', 'mail.event_id = events.id');
  $query->addField('events', 'nid');
  $query->addField('events', 'cid');
  $query->addField('events', 'type');
  $query->addField('events','event');
  $query->addField('events','created');
  $query_object = $query->execute();
  $notifications = $query_object->fetchAll();
  
  $new_posts = array();
  $updated_posts = array();
  $new_comments = array();
  $params['new'] = array();
  $params['updated'] = array();
  $params['comments'] = array();
  
  if($notifications) {
    foreach($notifications as $key => $notification) {
      $time_interval = '';
      if(!is_null($notification->cid)) {
        $object = comment_load($notification->cid);
      }
      else {
        $object = node_load($notification->nid);
      }
      $time_delta = time() - $object->changed;
      
      if ($time_delta < 1) {
        $time_interval = "just now.";
      }
      else {
        $time_interval = format_interval(time() - $object->changed, 2);
      }
      $author = user_load($object->uid);
      if ($notification->event == 'create') {
        if ($notification->type == 'node') {
          $new_posts[$key]['@title'] = l($object->title, $base_url . '/node/' . $object->nid, array('html' => TRUE));
          $new_posts[$key]['@author'] = $author->name;
          $new_posts[$key]['@time'] = $time_interval;
        }
        elseif ($notification->type == 'comment') {
          $node = node_load($object->nid);
          $new_comments[$key]['@node_title'] = l($node->title, $base_url . '/node/' . $node->nid, array('html' => TRUE));
          $new_comments[$key]['@comment_subject'] = l($object->subject, $base_url . '/node/' . $node->nid, array('html' => TRUE, 'fragment' => 'comment-' . $object->cid));
          $new_comments[$key]['@author'] = $author->name;
          $new_comments[$key]['@time'] = $time_interval;
        }
      }
      elseif ($notification->event == 'update') {
        $updated_posts[$key]['@title'] = l($object->title, $base_url . '/node/' . $object->nid, array('html' => TRUE));
        $updated_posts[$key]['@author'] = $author->name;
        $updated_posts[$key]['@time'] = $time_interval;
      }
      
    }
  }
  $params['new'] = $new_posts;
  $params['updated'] = $updated_posts;
  $params['comments'] = $new_comments;
  
  return $params;
}

function og_mail_mail($key, &$message, $params) {
  global $base_url;
  
  $account = $params['account'];
      
  $message['subject'] = 'Coasts, Oceans, Ports and Rivers Institute web update (development)';
  
  $message['body'] = theme('og_mail', $params);
  $message['from']= variable_get('site_mail', 'tchase@mycopri.org');
}

function og_mail_theme($existing, $type, $theme, $path) {
  dsm('register og_mail theme');
  return array(
      'og_mail' => array(
          'variables' => array('params' => array()),
          'template' => 'og_mail',
      ),
  );
}

function og_mail_preprocess_og_mail(&$variables) {
  $new = $variables['new'];
  $updated = $variables['updated'];
  $comments = $variables['comments'];
  dsm($new);
  dsm($updated);
  dsm($comments);
  $notices = array();
  if(count($new) > 1) {
    foreach($new as $post) {
      $notices[] = "{$post['@title']} was posted {$post['@time']} ago by {$post['@author']}.";
    }
    $variables['new_posts'] = theme('item_list', 
            array(
                'items'=>$notices, 
                'type'=>'ul', 
                'title'=>'You might want to check out the following new posts:',)
    );
  }
  elseif (count($new) == 1) {
    $variables['new_posts'] = "{$post['@author']} posted {$post['@title']} {$post['@time']}";
  }
  
  $notices = array();  
  if(count($updated) > 1) {
    foreach($updated as $post) {
      $notices[] = "{$post['@author']} updated {$post['@title']} {$post['@time']} ago.";
    }
    $variables['updated_posts'] = theme('item_list', 
            array(
                'items'=>$notices, 
                'type'=>'ul', 
                'title'=>'The following posts have been updated:',)
    );  
  }
  elseif (count($updated) == 1) {
    $variables['updated_posts'] = "{$post['@author']} updated {$post['@title']} {$post['@time']}";
  }
  
  $notices = array();
  if(count($comments) > 1) {
    foreach($comments as $comment) {
      $notices[] = "{$comment['@author']} commented on {$comment['@node_title']} {$comment['@time']}";
    }
    $variables['comments'] = theme('item_list', 
            array(
                'items'=>$notices, 
                'type'=>'ul', 
                'title'=>'The following comments have been made:',)
    );
  }
  elseif (count($comments) == 1) {
    $variables['comments'] = "{{$comment['@author']} commented on {$comment['@node_title']} {$comment['@time']}";
  }
}